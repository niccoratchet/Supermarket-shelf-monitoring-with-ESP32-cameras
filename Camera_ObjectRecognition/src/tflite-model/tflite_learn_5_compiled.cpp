/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 30.07.2024 13:55:46

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 238624;
#else
constexpr int kTensorArenaSize = 237600;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[5] = { 14946, -27745, -21343, -21023, -25538, };
const TfArray<1, int> tensor_dimension2 = { 1, { 5 } };
const TfArray<5, float> quant2_scale = { 5, { 0.00036629298119805753, 0.00023696929565630853, 0.00030028875335119665, 0.00031021231552585959, 0.00026320834876969457, } };
const TfArray<5, int> quant2_zero = { 5, { 0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[5*1*1*32] = { 
  /* [0][0][][] */ -7,32,-18,-28,-48,63,127,20,29,-13,-62,12,-6,43,36,-15,-45,-96,-25,-35,5,1,-47,-98,-22,-6,42,-83,73,75,-52,16, 
  /* [1][0][][] */ -27,93,68,110,40,82,-127,-34,-59,-36,75,25,-76,60,-63,40,9,38,13,-34,-56,87,80,-24,-8,65,34,81,-36,-87,-2,-78, 
  /* [2][0][][] */ -40,-33,-37,-17,1,21,-36,-35,61,80,-29,75,51,77,-63,-20,2,1,63,-34,-15,-57,73,-56,57,48,46,17,-127,-23,70,81, 
  /* [3][0][][] */ 51,-39,1,-23,78,-92,-127,-47,32,-34,-39,-50,0,-17,10,-29,-79,-76,7,-24,7,31,-16,26,39,73,-23,4,-35,0,19,-51, 
  /* [4][0][][] */ -86,-48,70,8,10,-64,-127,-58,77,83,59,-65,22,-48,68,14,74,-37,-1,80,14,-30,5,85,7,-29,-36,-70,-89,92,17,-62, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 5,1,1,32 } };
const TfArray<5, float> quant3_scale = { 5, { 0.0064868084155023098, 0.0041965707205235958, 0.0053179166279733181, 0.0054936567321419716, 0.0046612471342086792, } };
const TfArray<5, int> quant3_zero = { 5, { 0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 734, -932, 673, 93, 438, 944, 2332, -1272, 532, 307, -5, -856, -1063, -73, -840, -793, -605, -239, -18, 434, -772, -91, 211, -799, 255, 279, -768, -176, 1654, -1036, 12, -502, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 6.22952138655819e-05, 5.4566382459597662e-05, 7.5518182711675763e-05, 7.3533024988137186e-05, 6.5533160523045808e-05, 8.9621113147586584e-05, 0.00012605037773028016, 6.6500208049546927e-05, 9.4979433924891055e-05, 0.00011159237328683957, 7.5273637776263058e-05, 6.4092884713318199e-05, 6.1731509049423039e-05, 6.8618624936789274e-05, 5.7516488595865667e-05, 7.7455100836232305e-05, 8.1441197835374624e-05, 8.0053767305798829e-05, 7.7653479820583016e-05, 9.0483772510197014e-05, 6.7081571614835411e-05, 6.4880434365477413e-05, 8.155688556144014e-05, 7.3184710345230997e-05, 8.9031469542533159e-05, 8.9931912953034043e-05, 6.4622428908478469e-05, 6.4094674598891288e-05, 0.00015915541735012084, 8.1963487900793552e-05, 8.8995322585105896e-05, 7.9146273492369801e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -3,-16,97,12,103,22,-114,-77,84,-69,-118,-11,76,-8,-13,51,-4,-44,-80,-85,-46,-116,38,127,-105,20,93,-27,123,22,-23,-60,95,-35,-57,52,-95,-32,-69,48,66,-56,-69,101,65,-91,119,5, 
  /* [1][0][][] */ -54,11,-91,-25,-59,58,38,-15,57,-124,-127,86,49,-47,3,43,89,-55,34,97,-68,-32,22,19,40,9,-63,85,-5,-17,80,-85,43,85,-26,0,30,64,-35,-69,-88,-14,-45,-116,-57,16,-45,-77, 
  /* [2][0][][] */ 66,-15,-14,62,5,17,-6,87,-77,81,-25,127,80,-79,-10,-38,-15,7,22,-6,-49,-44,106,-5,24,95,12,17,-30,-6,21,97,-36,9,-89,-113,-57,92,93,6,-54,-34,-21,-36,-49,105,-14,-51, 
  /* [3][0][][] */ 97,-25,32,-23,-37,9,-126,28,41,26,68,27,93,23,21,-10,59,95,-33,-47,102,-127,-19,-109,14,-18,-104,65,57,-108,50,31,-30,-9,-36,-33,-81,20,27,60,-64,-47,-77,-9,56,24,-41,-70, 
  /* [4][0][][] */ 76,119,-3,55,-1,-51,-78,17,64,90,-26,73,56,-118,9,-127,-26,1,-83,-90,109,-99,97,48,13,6,81,-28,-6,51,-119,-29,82,118,35,-125,-39,28,-75,75,-73,-39,-29,-100,45,98,56,67, 
  /* [5][0][][] */ 79,-73,69,63,47,-127,-15,56,59,-49,-19,-27,30,11,2,-12,49,65,-48,66,44,51,24,-65,-45,-25,-58,-36,39,-20,-19,-32,-5,26,-56,7,-52,-8,47,31,-56,-12,34,25,-2,37,26,-20, 
  /* [6][0][][] */ -8,-22,64,92,-27,-45,50,77,-20,-18,27,-51,43,127,89,-62,28,-24,72,116,-43,34,78,36,-39,-45,14,-16,0,-29,33,-11,-41,-43,24,41,78,-7,-43,-14,41,78,8,26,-15,39,-40,20, 
  /* [7][0][][] */ 68,20,-52,-67,-91,75,74,-29,77,-30,-66,-17,10,13,10,43,24,-18,-3,98,11,9,-31,41,-82,81,-1,14,-101,57,72,4,-14,-10,25,89,-115,46,-44,-56,51,-94,31,86,10,-37,48,-127, 
  /* [8][0][][] */ -10,26,-23,-50,52,39,-107,2,1,33,-37,88,5,-58,-45,-27,-32,72,-74,3,37,7,38,56,-73,-4,31,69,-38,12,-127,73,69,2,39,7,72,-11,13,59,88,64,-64,-108,13,7,5,80, 
  /* [9][0][][] */ -1,-27,53,20,55,-29,-96,-47,16,31,-55,55,-18,-49,-77,5,5,22,-66,-32,20,73,-61,-84,58,-30,-36,36,-12,-63,-127,50,44,18,16,7,-39,8,5,-2,60,-30,5,-73,54,34,-35,39, 
  /* [10][0][][] */ -9,28,85,-73,0,127,38,28,11,32,11,-2,65,-10,-58,47,3,91,-79,-103,5,-16,56,-88,58,83,-127,-82,-35,24,-87,-41,64,87,28,29,-46,28,-10,47,7,94,-91,-54,-75,-17,-27,-65, 
  /* [11][0][][] */ 65,-11,-39,68,81,23,-10,2,66,51,-81,82,-9,-105,4,-71,-63,-109,42,40,13,49,17,-127,-104,-96,-37,38,74,-27,-24,-38,-94,-76,36,33,-73,43,-45,-66,-40,72,-71,-24,-55,-73,-98,-94, 
  /* [12][0][][] */ -13,32,-73,-28,52,24,-76,10,-60,26,-35,-11,-67,-3,16,-52,-105,-54,-55,-62,-2,-14,-12,60,-80,-57,61,-110,54,-16,-99,76,-99,-86,-64,11,-28,-92,-38,13,101,7,-127,-53,-43,-84,-56,80, 
  /* [13][0][][] */ 93,-87,61,69,79,29,0,35,45,-87,-16,-37,82,-10,17,-76,-127,-57,-93,20,61,-7,94,-63,-63,38,-38,14,-64,-110,3,27,39,87,-19,35,-77,-12,19,61,-77,62,-63,-33,-31,23,0,-20, 
  /* [14][0][][] */ -65,-91,67,56,56,-37,0,-127,-81,-53,49,59,-47,-66,-71,-80,-66,-53,-2,7,-55,20,-21,51,-98,-80,-19,22,-127,-121,-59,18,92,-41,-44,-7,71,96,44,-116,-18,-125,37,72,45,-94,55,-85, 
  /* [15][0][][] */ 53,-40,-32,34,50,-88,123,-84,37,-15,-19,5,60,58,-81,-95,50,25,-66,11,25,-8,48,61,74,72,5,47,0,19,127,-80,-11,-9,-69,-9,-65,100,59,-49,-6,69,-43,5,0,-65,-49,-76, 
  /* [16][0][][] */ -17,-30,66,-65,31,127,-80,29,27,30,-62,97,-36,-43,-59,-1,80,88,50,29,94,30,-24,3,5,50,-76,33,-90,-20,16,5,-77,53,2,40,-44,50,-25,-21,62,-24,27,71,28,100,54,-33, 
  /* [17][0][][] */ 35,-61,14,37,-25,-127,-42,-73,37,-63,123,30,84,37,-86,1,11,42,116,53,-58,-43,15,-33,25,109,-40,14,103,-34,22,56,-17,-7,13,-9,-47,83,-64,-9,-83,-29,4,20,3,7,48,-86, 
  /* [18][0][][] */ -65,25,48,-55,4,-123,-117,0,-1,50,-127,-31,-16,-14,-16,-72,-15,-9,-1,-23,83,-4,13,-80,8,-74,-59,97,26,-30,-73,24,47,-6,-61,-56,-35,33,-11,61,-26,-3,-56,-63,-68,23,36,11, 
  /* [19][0][][] */ 20,-20,68,-8,53,6,9,73,43,-20,11,34,-74,-12,-115,80,76,-39,57,39,5,25,-37,7,75,-42,-35,-27,-127,-76,-61,47,56,-30,-44,-42,12,-60,-15,-39,60,-61,-57,-30,-43,41,18,-65, 
  /* [20][0][][] */ -26,43,43,65,-87,69,127,31,-3,-5,-82,-15,-20,123,25,-63,-53,-47,-62,-31,2,-52,-78,-74,50,-71,-94,20,5,-1,87,75,63,18,-30,31,20,-44,-29,-107,-79,-42,-77,-90,-39,-67,-72,68, 
  /* [21][0][][] */ 127,105,72,-86,83,-112,43,2,5,-49,-25,5,25,-22,-17,-125,-99,-31,18,-36,83,-94,84,-37,69,-2,3,42,30,33,21,9,18,27,-69,-124,87,124,-117,-9,-85,13,51,-15,-89,-95,-67,68, 
  /* [22][0][][] */ 43,-73,-65,-67,74,-93,29,40,-60,63,-61,-58,91,-123,-123,-99,3,76,-85,-49,77,-32,30,-11,67,25,-127,85,-28,-98,-78,-66,49,59,14,18,-4,11,-26,-53,2,-2,-14,39,49,-63,76,-3, 
  /* [23][0][][] */ 33,-27,-10,27,57,-109,-27,-99,58,-74,66,36,6,-108,34,-127,54,-35,-97,57,56,-86,65,1,-2,-5,99,4,43,65,97,-51,-36,15,10,-4,49,-14,-97,-4,-95,-19,12,-86,-66,-83,89,11, 
  /* [24][0][][] */ -60,-14,-83,-42,-39,-104,-107,-55,43,76,5,36,86,-15,-17,-127,-71,32,-23,-55,74,-32,-32,-23,2,-51,58,58,80,40,-67,-40,16,22,47,18,-35,-45,55,5,-30,-60,74,-28,28,-10,49,62, 
  /* [25][0][][] */ -38,-13,-61,-1,69,-100,-127,31,30,-60,-43,7,65,-66,-57,-56,-74,39,-15,-99,54,44,6,-21,4,-23,-48,39,66,-46,-29,75,74,-53,42,23,58,-15,-4,10,-80,65,-46,-27,72,29,59,37, 
  /* [26][0][][] */ 25,-93,-32,-17,-99,-21,-39,-34,-108,-122,88,51,-63,-41,-15,-25,79,1,-53,-43,-7,44,77,12,40,59,-2,19,27,-2,-127,-11,-42,-65,-78,-85,-63,55,-63,74,-119,70,54,12,-78,40,-56,67, 
  /* [27][0][][] */ 45,-20,-48,-105,-79,-124,-30,-21,52,90,54,-65,1,-50,37,-67,47,23,48,-72,-48,-6,7,-48,-58,108,-127,-1,81,-8,15,6,72,76,-98,-65,-109,-22,-89,112,-86,31,12,0,88,41,63,83, 
  /* [28][0][][] */ 49,37,54,87,-30,-34,43,6,21,-17,69,14,6,49,63,36,55,37,65,127,-7,39,5,16,-55,85,10,-25,25,22,54,23,-33,11,51,52,73,-18,-23,-7,22,69,4,64,-24,-11,-5,27, 
  /* [29][0][][] */ 6,13,15,-41,-83,26,-14,-3,77,-35,-77,-82,43,-1,-1,-12,-82,55,23,21,-76,8,12,-9,-50,-13,-2,-39,-94,20,127,-25,11,-23,-49,-1,-27,46,-22,37,43,47,-43,66,-21,59,-41,-30, 
  /* [30][0][][] */ 18,-53,-62,16,-52,-5,-57,-11,69,-11,-27,-26,-51,-1,9,-5,-39,27,-82,-127,34,-37,-69,-6,-72,0,-57,86,2,-81,-105,0,-39,-31,-55,-4,-7,-4,5,32,59,-48,-38,29,73,-20,77,47, 
  /* [31][0][][] */ 40,-77,10,58,24,34,76,-78,-21,-28,-62,-68,60,127,-44,69,-56,-88,22,46,32,26,-24,56,7,-92,15,17,-56,-62,115,62,4,5,-54,1,57,-37,-61,-87,34,-57,-31,20,-5,-54,-26,11, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0026475465856492519, 0.0023190712090581656, 0.0032095226924866438, 0.0031251534819602966, 0.0027851592749357224, 0.0038088972214609385, 0.0053571411408483982, 0.0028262587729841471, 0.0040366258472204208, 0.0047426759265363216, 0.0031991295982152224, 0.0027239474002271891, 0.0026235890109091997, 0.0029162915889173746, 0.002444450743496418, 0.003291841596364975, 0.0034612508025020361, 0.0034022850450128317, 0.0033002728596329689, 0.0038455601315945387, 0.0028509667608886957, 0.0027574184350669384, 0.0034661677200347185, 0.0031103501096367836, 0.0037838374264538288, 0.0038221061695367098, 0.0027464532759040594, 0.0027240237686783075, 0.0067641050554811954, 0.0034834481775760651, 0.0037823012098670006, 0.0033637166488915682, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[48] = { -458, 1142, 3308, 3802, 6083, -476, 91, 25626, 949, 6262, 658, -1262, 4108, -1618, 6824, -687, -128, -1002, 968, 1866, 1714, 2155, 4250, 514, -2325, -1057, 681, 1491, 1528, 2978, 921, 3229, 2550, 3073, 4307, 1081, 8364, 583, 204, -849, 561, 11893, -834, 2071, 5237, 185, 1371, 4632, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00034913304261863232, 0.00029032709426246583, 0.00011949726467719302, 0.00017338119505438954, 0.00014970763004384935, 0.00018589726823847741, 0.0004758450377266854, 3.8589609175687656e-05, 0.00023024657275527716, 0.00013304497406352311, 0.00036666006781160831, 0.00031384697649627924, 0.00015557756705675274, 0.00031012072577141225, 0.00014221305900719017, 0.00021594415011350065, 0.00015656047617085278, 9.9052704172208905e-05, 0.00039855009526945651, 0.00037935987347736955, 0.00036830484168604016, 0.00022713959333486855, 0.00015612707647960633, 0.00023250738740898669, 0.00021977895812597126, 0.0003621332289185375, 0.00027750118169933558, 0.00029971948242746294, 0.00026000599609687924, 0.00019698721007443964, 0.00026840879581868649, 0.00018637155881151557, 0.00026529098977334797, 0.00020029301231261343, 0.00010838907473953441, 0.00014703186752740294, 0.00011126889876322821, 0.00018690024444367737, 0.0001898029149742797, 0.00026959209935739636, 0.00044180138502269983, 8.0884092312771827e-05, 0.00027289349236525595, 0.00016292558575514704, 0.0001567063300171867, 0.00027896295068785548, 0.00017499063687864691, 0.00017793803999666125, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ 26,-33,-45,45,-127,-8,-59,17, 
  /* [1][0][][] */ -127,6,116,15,-99,-31,6,3, 
  /* [2][0][][] */ 27,119,-68,22,-38,-127,-41,96, 
  /* [3][0][][] */ -75,39,-19,127,18,-60,-38,-18, 
  /* [4][0][][] */ 13,-8,28,-117,-3,36,-127,22, 
  /* [5][0][][] */ 79,127,-79,-69,-36,-14,22,-111, 
  /* [6][0][][] */ 15,-16,4,63,-13,-127,-10,-66, 
  /* [7][0][][] */ 82,120,-60,-69,-83,-44,16,-127, 
  /* [8][0][][] */ 2,-41,61,-5,0,11,-54,-127, 
  /* [9][0][][] */ -61,13,-127,2,-109,-64,-102,-29, 
  /* [10][0][][] */ 75,26,73,-48,-101,-15,72,127, 
  /* [11][0][][] */ 127,-26,-90,-5,62,3,-73,-33, 
  /* [12][0][][] */ -20,-112,127,13,7,12,-92,76, 
  /* [13][0][][] */ 19,-62,58,-22,1,-127,28,-107, 
  /* [14][0][][] */ -117,62,127,2,-15,-61,75,-81, 
  /* [15][0][][] */ 7,127,-49,-59,-70,10,20,-111, 
  /* [16][0][][] */ 52,104,-64,61,-11,-39,-28,127, 
  /* [17][0][][] */ 60,70,-14,61,-63,90,-127,23, 
  /* [18][0][][] */ 92,-29,93,-62,96,-127,5,-2, 
  /* [19][0][][] */ -9,6,2,127,26,-48,-34,-90, 
  /* [20][0][][] */ 8,2,-8,25,-11,58,-127,15, 
  /* [21][0][][] */ 15,11,21,22,43,127,45,-62, 
  /* [22][0][][] */ 47,-127,7,48,-79,58,11,30, 
  /* [23][0][][] */ -41,-110,-10,-102,5,-59,1,-127, 
  /* [24][0][][] */ 39,17,-12,-84,-34,-127,-56,44, 
  /* [25][0][][] */ 71,87,127,13,-1,14,-63,7, 
  /* [26][0][][] */ -127,28,112,-69,-73,-14,84,5, 
  /* [27][0][][] */ -63,22,-27,-92,23,127,-28,78, 
  /* [28][0][][] */ 2,-104,74,31,30,12,-38,127, 
  /* [29][0][][] */ -127,26,89,-37,-127,-6,107,-34, 
  /* [30][0][][] */ 85,-52,-35,24,-127,-6,-8,-36, 
  /* [31][0][][] */ 55,100,33,-43,-78,-17,1,127, 
  /* [32][0][][] */ -52,-7,73,-65,43,5,-127,-74, 
  /* [33][0][][] */ 72,37,102,-127,8,43,-46,61, 
  /* [34][0][][] */ -5,-112,69,-37,45,127,74,-96, 
  /* [35][0][][] */ 55,7,127,51,30,125,90,-100, 
  /* [36][0][][] */ -46,30,0,49,59,-127,46,13, 
  /* [37][0][][] */ 42,-26,50,37,-127,88,-24,-26, 
  /* [38][0][][] */ -70,6,-127,-20,96,-29,-103,-57, 
  /* [39][0][][] */ 3,-1,46,-116,-31,47,-127,27, 
  /* [40][0][][] */ 63,-8,-85,-127,85,61,51,-15, 
  /* [41][0][][] */ 5,-22,11,127,-87,1,-59,-55, 
  /* [42][0][][] */ -68,37,48,127,-45,-72,-41,-9, 
  /* [43][0][][] */ 97,-83,96,61,-103,40,127,50, 
  /* [44][0][][] */ 5,-34,26,-73,-8,127,25,31, 
  /* [45][0][][] */ -8,34,-46,-9,77,-44,-127,-39, 
  /* [46][0][][] */ -109,-108,-4,-35,23,127,-53,-101, 
  /* [47][0][][] */ -127,-73,-41,9,31,105,-25,-38, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0039232335984706879, 0.0032624269369989634, 0.0013427995145320892, 0.001948297256603837, 0.0016822755569592118, 0.0020889411680400372, 0.0053471056744456291, 0.00043363426811993122, 0.0025872976984828711, 0.0014950360637158155, 0.0041201859712600708, 0.0035267213825136423, 0.0017482365947216749, 0.0034848493523895741, 0.0015980585012584925, 0.0024265802931040525, 0.0017592816147953272, 0.0011130624916404486, 0.0044785365462303162, 0.0042628948576748371, 0.0041386685334146023, 0.002552384277805686, 0.0017544113798066974, 0.0026127025485038757, 0.0024696723558008671, 0.0040693175978958607, 0.0031183010432869196, 0.0033679697662591934, 0.0029217065311968327, 0.0022135598119348288, 0.0030161293689161539, 0.0020942708943039179, 0.0029810944106429815, 0.0022507072426378727, 0.0012179759796708822, 0.0016522079240530729, 0.0012503367615863681, 0.00210021180100739, 0.0021328292787075043, 0.0030294263269752264, 0.0049645546823740005, 0.00090890045976266265, 0.0030665241647511721, 0.0018308067228645086, 0.0017609205096960068, 0.0031347272451967001, 0.001966382609680295, 0.0019995027687400579, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[8] = { -967, 3511, -11361, 9271, 6258, -8138, 9838, -1326, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 0.00012276113557163626, 0.00012498567230068147, 6.7415458033792675e-05, 0.00015539600281044841, 0.00012350297765806317, 8.6800420831423253e-05, 0.00016327922639902681, 7.9367549915332347e-05, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 34,21,24,61,-3,-35,39,49,0,36,16,-3,28,-10,53,-24,-46,-19,-127,-15,40,-25,49,51,14,15,34,-24,-14,-44,6,63,-54,40,45,4,20,67,-56,-42,-2,10,-88,-40,20,19,-51,-70, 
  /* [1][0][][] */ 2,-35,-9,73,-20,-3,-19,-15,16,9,-11,-50,-1,5,13,1,53,25,40,-52,-1,33,49,-62,-9,15,-20,-47,-43,14,-22,5,-35,-29,-103,65,3,9,-127,-12,5,-23,68,28,93,-33,-58,33, 
  /* [2][0][][] */ -7,4,41,-35,-13,-25,7,100,-19,61,-44,-16,100,-14,41,-19,-55,-63,17,34,-19,-30,-15,-3,32,13,1,62,20,1,75,13,-50,-24,14,54,9,67,64,-127,61,30,-40,-17,20,32,26,1, 
  /* [3][0][][] */ 57,-2,-127,3,42,-9,44,-22,7,-16,8,24,-58,-40,35,7,8,59,1,15,-46,17,-80,3,-3,-97,60,1,-66,-65,-61,36,55,46,-30,13,-65,18,9,-18,30,-65,-19,-12,42,-38,18,-30, 
  /* [4][0][][] */ 3,48,-10,-13,27,11,-72,-109,-36,36,-16,86,6,-19,-22,69,60,58,-105,25,27,5,1,4,25,27,0,-16,-25,15,-6,-46,24,-18,-127,11,-27,-2,28,75,-26,-10,83,42,24,-38,-16,2, 
  /* [5][0][][] */ -87,-40,105,-29,56,15,63,3,-127,7,-89,-23,-65,-64,73,97,-17,10,21,22,40,17,5,2,-60,-3,-31,-11,-25,4,-9,-33,-5,32,62,36,30,74,-14,14,62,-7,-59,61,-11,25,62,41, 
  /* [6][0][][] */ 120,61,-27,48,52,-23,-109,-77,22,2,-5,64,-40,-45,-19,25,-32,43,9,-16,120,-31,52,127,33,-70,32,-30,-65,-23,-42,-67,51,-31,29,-17,-25,36,-41,17,-56,-60,-57,-41,-18,-50,35,-1, 
  /* [7][0][][] */ 9,40,51,-79,62,-55,-25,-6,-5,3,30,21,-33,0,53,-3,-23,20,-14,56,-52,2,-15,59,0,-51,1,42,-12,37,-26,4,43,-16,-50,-34,-64,23,127,-6,13,-25,-37,-15,42,-9,75,-4, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.005217348225414753, 0.005311890970915556, 0.0028651568572968245, 0.0066043301485478878, 0.0052488762885332108, 0.0036890178453177214, 0.0069393669255077839, 0.003373120678588748, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[48] = { 185, -3033, 943, -2538, -3170, -1390, 5018, 12036, -7507, 10524, 15462, -4480, 8643, -5661, 5435, -960, -6630, -2648, 5194, -817, -3560, -2076, -21154, -2407, -1653, 4745, 1099, 171, 4170, 3929, 10852, -3413, -4766, -385, -2189, -5870, 5730, 9302, -5004, 8208, 3817, -1510, -4643, -7785, -5667, 14855, 734, 6921, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.00015876955876592547, 0.0002602854510769248, 0.00015188059478532523, 0.00019711512140929699, 7.143188122427091e-05, 0.00028930016560479999, 0.00022251525660976768, 0.00037483582855202258, 0.00017357722390443087, 8.8528409833088517e-05, 8.0882280599325895e-05, 0.00015590450493618846, 0.00016330902872141451, 0.00022148963762447238, 0.00017561744607519358, 0.00023644659086130559, 0.00032336267759092152, 0.00023489653540309519, 0.00011604902101680636, 0.00054508954053744674, 0.00019907401292584836, 0.00013369659427553415, 7.4047158705070615e-05, 0.00033893345971591771, 0.0002065200824290514, 0.00025489108520559967, 0.00011676263966364786, 0.00013532683078665286, 0.00025378752616234124, 0.00014027292490936816, 0.0001415784063283354, 0.00013884222425986081, 0.00026460917433723807, 0.00034162061638198793, 0.00040892555261962116, 0.00011856971104862168, 0.0001243253645952791, 0.00013253974611870944, 0.00036083278246223927, 0.00016723560111131519, 0.00028187557472847402, 0.00023968373716343194, 0.00013737467816099524, 0.00017860031221061945, 0.00024174594727810472, 8.6888561781961471e-05, 0.00030572171090170741, 0.00014273978013079613, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 48,127,56,82,-8,-64,22,52,-64,-22,-115,62,32,37,-41,44,73,14,60,46,34,-13,29,-5,4,-107,31,18,-36,-56,-24,115,1,-95,2,32,-91,52,0,-119,-15,-52,-51,30,1,-127,48,-121, 127,11,89,-92,65,95,24,-24,-65,-87,-64,127,-7,-45,-127,66,8,120,31,8,27,105,78,29,127,-82,7,-124,-127,30,-111,127,29,-53,-84,127,42,-87,-55,-93,7,127,-95,78,-28,-69,24,-6, 29,-2,41,-66,-12,-62,40,21,-53,20,-42,38,20,40,24,11,-34,21,65,25,-11,-47,-68,9,16,-101,-104,-28,-46,-127,-20,43,35,-51,35,23,-89,-32,13,-81,-14,-13,106,11,-1,-100,-8,-127, 
  /* [0][1][][] */ 79,56,33,122,102,98,-9,-127,98,-127,-120,-51,-15,75,-72,110,-119,108,48,81,-5,69,73,-55,-27,127,51,66,27,22,-110,100,21,46,-67,41,-89,-25,10,-25,-25,-47,41,-63,38,-48,18,-18, 26,117,-127,72,37,98,-127,26,127,-42,15,93,-127,127,5,-41,81,-127,-127,10,73,46,90,-127,-38,71,-52,33,-28,19,95,-40,127,6,104,-85,63,-127,127,127,127,58,-127,21,89,-23,-127,-38, 81,-1,34,-127,127,55,12,-111,94,-28,-127,5,-5,43,-73,76,127,-2,11,70,34,-127,63,121,15,125,-55,-10,37,-39,-88,78,-20,42,127,55,-88,-50,-35,-13,-34,-58,109,127,127,-31,16,-32, 
  /* [0][2][][] */ 27,77,35,80,116,-6,27,30,37,-34,-6,-9,24,-44,74,-26,4,30,74,-67,127,-27,92,-54,-18,-81,127,127,55,-10,-127,109,-1,1,-13,2,-70,-16,7,35,-29,-51,43,7,-1,5,60,-3, -2,-12,23,34,120,-127,16,-112,0,-10,16,-29,-18,-35,6,127,25,-57,5,127,76,73,127,26,62,-70,-58,82,-36,-98,-44,33,19,127,-49,11,-104,-78,27,-2,-100,88,-42,31,-45,-90,43,-48, 40,-14,44,-37,118,-4,26,38,37,16,51,38,23,-31,72,-11,16,-27,54,-91,32,-73,-26,66,-13,-91,-109,70,38,-47,-9,-23,5,-44,-5,52,-127,-72,-13,-34,-20,1,6,8,-12,30,-8,-26, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.0067477058619260788, 0.011062131263315678, 0.0064549250528216362, 0.0083773927763104439, 0.0030358547810465097, 0.012295256368815899, 0.0094568980857729912, 0.015930522233247757, 0.0073770317249000072, 0.0037624572869390249, 0.0034374967217445374, 0.00662594148889184, 0.0069406335242092609, 0.0094133093953132629, 0.0074637415818870068, 0.010048979893326759, 0.013742913492023945, 0.0099831027910113335, 0.0049320831894874573, 0.02316630445420742, 0.0084606455639004707, 0.0056821051985025406, 0.003147004172205925, 0.01440467219799757, 0.0087771033868193626, 0.010832870379090309, 0.0049624121747910976, 0.0057513900101184845, 0.010785969905555248, 0.0059615992940962315, 0.0060170823708176613, 0.0059007946401834488, 0.011245889589190483, 0.014518875628709793, 0.017379336059093475, 0.0050392127595841885, 0.005283827893435955, 0.0056329388171434402, 0.015335393138229847, 0.0071075130254030228, 0.011979712173342705, 0.010186558589339256, 0.0058384235017001629, 0.0075905132107436657, 0.010274202562868595, 0.0036927638575434685, 0.012993172742426395, 0.0060664406046271324, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[48] = { -2191, -3031, 2267, -283, -2044, 1265, 2175, 11523, 1321, 2681, 4300, 2564, 1479, 3905, 3867, -2602, 6953, 1900, 631, -3124, 686, -153, 1440, 6128, 886, 6274, 2088, -186, 6815, 423, 1898, -1124, -2734, -5666, -7051, 2061, 1512, 2075, 1799, 2076, 3759, 419, 7939, 1454, 16011, 5212, -1091, 857, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 0.00020762371423188597, 0.00018140893371310085, 0.00023738569871056825, 0.00022952418657951057, 0.00020729719835799187, 0.00012146651715738699, 0.00025276059750467539, 0.00010549017315497622, 0.00013840760220773518, 0.00022350189101416618, 0.00016715613310225308, 0.00017447737627662718, 0.00027034728555008769, 0.00017467574798502028, 0.00017585497698746622, 0.000195212138351053, 0.00012746857828460634, 0.00013400705938693136, 0.00030514740501530468, 0.00019210910249967128, 0.00010900825873250142, 0.00039818545337766409, 0.00022556132171303034, 0.00014938577078282833, 0.00028811095398850739, 0.00011592062219278887, 0.00030080875148996711, 0.00025231990730389953, 8.0391939263790846e-05, 0.00023614447854924947, 0.00019034939759876579, 0.00034658471122384071, 0.00018709943105932325, 8.2554972323123366e-05, 8.6972955614328384e-05, 0.00024884697631932795, 0.00024214007135014981, 0.00023143713769968599, 0.00023771457199472934, 0.00018789588648360223, 0.00021577812731266022, 0.00028915432631038129, 9.7725060186348855e-05, 0.00023800173948984593, 5.9357869758969173e-05, 0.00014070695033296943, 0.00018381787231191993, 0.00021366900182329118, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -21,-62,-69,96,7,-68,-107,-127, 
  /* [1][0][][] */ 127,-35,25,-47,61,-111,-1,56, 
  /* [2][0][][] */ -21,98,14,-127,33,107,-72,62, 
  /* [3][0][][] */ -47,127,-56,-102,-94,33,-9,-46, 
  /* [4][0][][] */ -7,-76,-105,-72,41,-102,-71,-127, 
  /* [5][0][][] */ -3,-127,118,70,17,105,58,-102, 
  /* [6][0][][] */ -21,31,-36,23,-13,24,-127,-63, 
  /* [7][0][][] */ 16,-6,6,21,-44,42,127,44, 
  /* [8][0][][] */ -41,60,-127,-1,-21,-88,-115,61, 
  /* [9][0][][] */ 57,11,-35,-46,2,127,-49,93, 
  /* [10][0][][] */ -44,14,96,122,127,120,12,-10, 
  /* [11][0][][] */ -56,-38,-15,38,-127,67,-31,-27, 
  /* [12][0][][] */ -36,40,92,-108,43,-58,-127,-42, 
  /* [13][0][][] */ 127,0,-59,-98,-21,-27,-43,98, 
  /* [14][0][][] */ -72,-80,16,-37,44,-102,40,-127, 
  /* [15][0][][] */ -36,81,44,51,123,127,-25,-21, 
  /* [16][0][][] */ 50,40,-31,-127,30,79,-35,59, 
  /* [17][0][][] */ -123,66,-108,22,85,42,-127,-22, 
  /* [18][0][][] */ -127,48,30,-26,-74,52,-18,9, 
  /* [19][0][][] */ 118,-17,-47,-33,98,-120,127,-107, 
  /* [20][0][][] */ 127,-107,70,-74,-81,44,80,18, 
  /* [21][0][][] */ 37,-45,-20,34,-22,43,127,15, 
  /* [22][0][][] */ 107,51,-127,-57,-15,115,73,79, 
  /* [23][0][][] */ -3,12,-20,-127,12,-15,-119,21, 
  /* [24][0][][] */ 127,-69,-76,-39,71,-47,2,-13, 
  /* [25][0][][] */ -7,-57,72,-14,92,127,-53,-75, 
  /* [26][0][][] */ 31,-36,6,82,127,-35,-64,-68, 
  /* [27][0][][] */ -86,-123,3,51,113,16,-127,116, 
  /* [28][0][][] */ -45,53,-125,-42,127,-66,-32,100, 
  /* [29][0][][] */ -121,15,127,-102,-16,-33,42,23, 
  /* [30][0][][] */ 110,-94,14,-38,-57,-127,19,28, 
  /* [31][0][][] */ 15,24,50,-20,-25,-9,-127,23, 
  /* [32][0][][] */ 43,-36,47,127,-54,-89,-58,-115, 
  /* [33][0][][] */ 103,-105,-12,84,-127,97,-12,-74, 
  /* [34][0][][] */ 37,-75,17,-28,-109,127,53,-53, 
  /* [35][0][][] */ 34,127,97,29,9,10,-48,-8, 
  /* [36][0][][] */ 21,108,-61,-89,-127,9,77,-83, 
  /* [37][0][][] */ 26,-9,36,-9,39,127,48,30, 
  /* [38][0][][] */ -56,-127,115,58,31,-42,-66,124, 
  /* [39][0][][] */ 20,30,127,-34,-41,49,-8,22, 
  /* [40][0][][] */ 12,-22,21,4,-16,-46,127,13, 
  /* [41][0][][] */ -28,-10,-49,-102,-88,-127,-45,5, 
  /* [42][0][][] */ 65,-36,68,-72,-127,-29,-54,10, 
  /* [43][0][][] */ 39,1,20,77,-58,-127,124,6, 
  /* [44][0][][] */ -51,-97,-30,-63,-20,32,-23,-127, 
  /* [45][0][][] */ 10,127,40,49,63,120,-112,36, 
  /* [46][0][][] */ -79,-1,3,42,127,101,-91,117, 
  /* [47][0][][] */ 3,127,-90,-77,-2,-37,28,-94, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.0029421504586935043, 0.0025706714950501919, 0.0033638952299952507, 0.0032524929847568274, 0.002937523415312171, 0.0017212521051988006, 0.0035817667376250029, 0.0014948579482734203, 0.0019613173790276051, 0.0031671535689383745, 0.0023687009233981371, 0.0024724472314119339, 0.0038309802766889334, 0.0024752581957727671, 0.0024919686838984489, 0.0027662711217999458, 0.0018063047900795937, 0.0018989590462297201, 0.0043241186067461967, 0.0027222991921007633, 0.0015447112964466214, 0.0056425225920975208, 0.0031963367946445942, 0.0021168843377381563, 0.004082702100276947, 0.0016426634974777699, 0.0042626373469829559, 0.0035755217541009188, 0.0011392011074349284, 0.0033463065046817064, 0.0026973630301654339, 0.0049113095737993717, 0.0026513091288506985, 0.0011698525631800294, 0.0012324580457061529, 0.0035263083409518003, 0.0034312675707042217, 0.0032796005252748728, 0.0033685555681586266, 0.0026625953614711761, 0.0030577031429857016, 0.0040974873118102551, 0.0013848217204213142, 0.0033726249821484089, 0.0008411359740421176, 0.0019939003977924585, 0.0026048074942082167, 0.0030278156045824289, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[8] = { 17984, -159, 18499, -6564, -13549, 7408, 2257, 17937, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 6.3951498304959387e-05, 0.00010375554120400921, 9.2705835413653404e-05, 9.7750285931397229e-05, 8.3477934822440147e-05, 0.00012626253010239452, 5.454416896100156e-05, 6.9107351009733975e-05, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 127,-7,-13,-16,-18,-86,12,7,51,-52,-58,-48,-13,100,-69,6,13,-11,16,4,18,-34,-2,2,62,9,-25,41,18,112,-50,-122,14,-84,14,0,42,-49,21,41,-63,-34,-27,-56,-86,-125,3,-39, 
  /* [1][0][][] */ -101,30,127,-68,96,28,94,59,-29,13,-18,102,43,-11,-125,-48,-123,-100,46,-1,-31,109,-59,-2,46,-113,-8,76,21,-48,39,58,13,39,11,61,-72,-1,28,20,-10,-27,-96,37,-17,-84,-104,66, 
  /* [2][0][][] */ 101,18,-47,-34,-55,-23,-83,-105,52,40,-83,-25,-26,47,-50,49,-22,70,13,33,89,44,12,-12,-116,9,20,-64,4,38,20,-74,2,-31,7,-7,-65,-52,-12,30,-119,-127,-31,-59,-44,-71,31,39, 
  /* [3][0][][] */ 27,13,10,28,-115,-13,-14,53,-29,-71,-2,88,13,-4,-90,-54,-14,30,-5,-75,-41,127,10,-55,19,51,97,-53,48,29,-2,28,60,28,14,-5,45,90,33,2,32,-40,17,-53,0,29,28,53, 
  /* [4][0][][] */ -59,1,-85,-4,14,91,10,25,-35,127,39,60,27,-70,-6,48,-18,-9,-10,16,-20,45,-72,34,2,0,44,-4,25,-65,95,110,43,58,-2,-98,-67,6,-16,-14,49,3,28,54,40,23,15,87, 
  /* [5][0][][] */ -35,-5,41,-2,53,-66,-50,-14,-30,-42,-2,-29,36,11,-9,23,12,10,4,32,34,48,11,25,15,-5,-49,-8,-52,-14,-127,-12,-57,-2,27,-36,1,-38,-20,-14,-2,-11,-21,-3,28,7,5,59, 
  /* [6][0][][] */ 18,80,-3,60,-6,47,-41,47,-63,-48,71,23,61,29,63,6,16,-56,-29,39,-21,85,35,-36,-110,3,-15,15,-53,13,-113,8,0,-48,-34,-52,127,17,-51,-35,39,50,38,-68,-67,-1,-64,-36, 
  /* [7][0][][] */ -42,3,-98,42,-20,-18,-3,-21,-60,-26,43,65,60,14,-50,-61,-83,76,3,2,68,21,40,-48,-41,105,-56,-113,-68,-36,-127,1,-17,-40,-61,-16,-22,-68,-67,-23,-20,54,54,-20,-84,-70,126,-59, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0027179387398064137, 0.0044096102938055992, 0.0039399978704750538, 0.004154386930167675, 0.0035478121135383844, 0.0053661572746932507, 0.0023181270807981491, 0.0029370624106377363, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[48] = { 7118, 1120, 8692, 6595, 22192, -5014, 677, 570, -5125, -7399, -2158, -864, 17701, 2724, 6472, 2986, 7187, 8060, -360, -1380, 8116, 3879, 8953, -4844, 11779, 10308, -1093, 1069, -669, -1630, 2474, 3161, 1997, -719, 4773, 720, 3569, -2228, -613, -1728, 4060, -7266, 6823, -3520, -4327, 2365, 7494, -5000, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.00022082911164034158, 0.0002528488403186202, 5.7185523473890498e-05, 0.00012729235459119081, 8.1347519881092012e-05, 0.00018576320144347847, 0.00020317002781666815, 0.00045611790847033262, 0.00021801028924528509, 0.00024373333144467324, 0.00016233963833656162, 0.00035105401184409857, 8.2122955063823611e-05, 0.00011587316112127155, 0.00027261488139629364, 7.6219417678657919e-05, 0.00012069146032445133, 0.00011043462291127071, 0.00059663603315129876, 0.00045803628745488822, 0.0001875885936897248, 0.00012896352563984692, 0.00013934272283222526, 0.00015276420162990689, 0.00018393289064988494, 0.0001466623943997547, 0.00034347418113611639, 0.00019638436788227409, 0.00035679512075148523, 0.00019363827595952898, 0.00018150938558392227, 0.00032774813007563353, 0.00022920909395907074, 0.00049970758846029639, 0.00010243808355880901, 0.00021832401398569345, 0.00027931176009587944, 0.00019054788572248071, 0.00018252624431625009, 0.00017190176004078239, 0.00022230563627090305, 0.00018967135110870004, 0.00015570010873489082, 0.00029517273651435971, 0.00025078284670598805, 0.00036744089447893202, 0.00018226097745355219, 0.00024661549832671881, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -102,13,62,5,-119,29,-67,-8,-3,125,87,-8,-15,84,-64,39,51,32,18,-23,-120,-76,-7,53,-99,-1,-35,-82,35,-100,125,41,-28,48,23,-51,26,-113,-38,127,-40,30,-36,14,18,3,-2,-12, 13,-42,-16,20,-23,46,-127,-8,28,7,127,76,-33,-74,-105,-50,-10,-48,127,53,17,11,-36,62,-117,-5,10,-127,20,-30,-21,-127,6,67,-66,-127,-31,53,-3,90,127,-42,-32,127,40,-127,-14,-22, -127,10,61,21,-127,89,-67,-14,0,127,5,-11,-26,71,-34,79,-53,18,18,-22,-95,-97,21,56,-2,-44,15,-69,-41,-101,55,-27,58,22,-59,-23,9,-127,0,109,-35,27,-18,25,37,10,7,51, 
  /* [0][1][][] */ 52,102,37,32,-22,4,62,-30,-51,41,59,1,-105,-10,-93,95,-5,-18,71,102,20,14,-108,8,-70,-97,-37,-67,127,41,65,119,-127,-8,85,-14,22,85,-127,-92,56,-18,3,26,-124,38,-27,-60, 116,12,-127,-127,92,127,6,127,-127,-85,-42,127,-78,-81,-127,-127,-31,-127,-78,65,127,127,-51,127,-127,26,-80,68,-64,-8,-122,-77,-16,127,-127,80,-127,-21,108,-34,-44,127,-127,-50,127,81,-127,-54, 41,45,127,26,-54,-8,18,-42,-27,30,6,-20,-38,-51,-52,110,-127,-42,42,127,-12,-6,6,-96,24,-55,127,-23,-55,127,-60,68,110,-59,-71,9,2,35,-12,-20,35,6,-5,10,12,28,-17,127, 
  /* [0][2][][] */ -107,-34,74,-16,-8,27,53,-12,109,-16,66,-11,-68,127,58,-20,51,68,29,-39,-54,-79,7,35,-96,-2,-22,13,6,79,127,5,-13,-9,72,24,54,-4,-35,15,-31,44,-1,-9,-22,-8,-4,29, -59,-127,117,-61,42,1,99,-10,118,-8,66,-49,-3,-45,-97,-31,-51,61,-122,21,-113,-8,-127,10,51,-127,6,27,-2,110,51,-56,-23,-84,-13,53,10,76,68,-43,5,25,21,-35,24,-19,13,37, -88,-21,45,-17,-14,84,21,-7,66,8,9,11,-127,92,112,9,-68,55,26,-6,-50,-94,73,-35,-31,17,16,27,0,80,29,-59,-20,15,-14,43,43,1,4,-11,-24,49,11,10,-31,10,-3,39, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.0099697727710008621, 0.011415367014706135, 0.002581754932180047, 0.0057468684390187263, 0.0036725967656821012, 0.008386651985347271, 0.0091725178062915802, 0.020592356100678444, 0.0098425112664699554, 0.011003829538822174, 0.0073291482403874397, 0.01584903709590435, 0.0037076054140925407, 0.0052313259802758694, 0.012307744473218918, 0.0034410781227052212, 0.0054488577879965305, 0.0049857920967042446, 0.026936328038573265, 0.020678965374827385, 0.0084690628573298454, 0.0058223167434334755, 0.0062909061089158058, 0.006896845530718565, 0.0083040185272693634, 0.0066213672980666161, 0.01550683006644249, 0.0088661657646298409, 0.016108229756355286, 0.0087421881034970284, 0.0081946048885583878, 0.014796845614910126, 0.010348103940486908, 0.022560300305485725, 0.0046247723512351513, 0.0098566748201847076, 0.012610089033842087, 0.0086026657372713089, 0.0082405125722289085, 0.0077608493156731129, 0.01003643311560154, 0.0085630929097533226, 0.0070293932221829891, 0.013326164335012436, 0.01132209412753582, 0.016588855534791946, 0.0082285366952419281, 0.01113395020365715, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[48] = { 13295, -535, 2509, 690, 2753, 974, 4107, -127, 19541, 9095, -792, -435, 1808, 1554, 293, 4135, 2155, 3601, -2660, -3621, 4462, 2188, 3188, -81, 6026, 2772, 3754, -78, 6177, -23, 5676, 4930, 5418, 161, 1232, 3631, 4004, 1671, 1437, 5106, -859, 4470, 2082, 3703, 7158, 791, 250, 2233, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 7.9118624853435904e-05, 0.00031256928923539817, 0.00020536602823995054, 0.00028945080703124404, 0.00028819005819968879, 0.00014749288675375283, 0.0001573941990500316, 0.00028182921232655644, 5.1985152822453529e-05, 8.5230472905095667e-05, 0.00017832462617661804, 0.00016704671725165099, 0.00025177330826409161, 0.00022586375416722149, 0.00011422880925238132, 0.00015205382078420371, 0.00019006959337275475, 0.00019885474466718733, 0.00017449742881581187, 9.3770875537302345e-05, 0.00015344825806096196, 0.00013855770521331578, 0.00022332346998155117, 0.00032545728026889265, 0.00013149688311386853, 0.00025561056099832058, 0.00018855110101867467, 0.00039649399695917964, 0.00014125999587122351, 0.00014980157720856369, 0.00015427889593411237, 0.00012533196422737092, 0.00018096865096595138, 0.00013658056559506804, 0.00021133969130460173, 0.00021561191533692181, 0.00016965232498478144, 0.00024443856091238558, 0.00031901468173600733, 8.0204205005429685e-05, 0.00021795793145429343, 0.00017424071847926825, 0.00034372461959719658, 0.00016950196004472673, 0.00012678219354711473, 0.00018676386389415711, 0.00021524906333070248, 0.00027513489476405084, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ 65,-104,27,9,41,-127,11,-98, 
  /* [1][0][][] */ -66,-62,-64,58,-127,47,-15,9, 
  /* [2][0][][] */ 69,-44,42,2,127,-21,-1,82, 
  /* [3][0][][] */ 25,120,-5,127,12,-9,-76,-60, 
  /* [4][0][][] */ -46,127,84,-32,42,-2,-47,0, 
  /* [5][0][][] */ -93,36,27,26,127,-22,100,-21, 
  /* [6][0][][] */ 67,-83,62,-17,66,127,70,37, 
  /* [7][0][][] */ -62,-38,45,71,82,40,-76,127, 
  /* [8][0][][] */ -34,-22,-43,-110,-40,127,-69,-17, 
  /* [9][0][][] */ -127,0,-96,-23,106,-20,-48,38, 
  /* [10][0][][] */ -17,-84,56,71,-33,-127,-121,-98, 
  /* [11][0][][] */ 48,66,-13,-10,-24,-95,21,127, 
  /* [12][0][][] */ 32,-8,-75,69,-76,127,78,99, 
  /* [13][0][][] */ -100,4,-97,23,-127,80,29,15, 
  /* [14][0][][] */ -42,127,-100,69,85,39,-37,67, 
  /* [15][0][][] */ -93,-39,12,-33,95,104,-51,-127, 
  /* [16][0][][] */ 83,-127,-100,-29,-48,60,-20,-42, 
  /* [17][0][][] */ 6,100,-85,-49,-105,50,57,-127, 
  /* [18][0][][] */ -25,-107,1,19,127,-51,-40,101, 
  /* [19][0][][] */ -37,119,-33,74,-24,-127,-106,37, 
  /* [20][0][][] */ 97,-22,42,-38,26,-98,63,127, 
  /* [21][0][][] */ 68,-48,127,63,-38,90,51,-1, 
  /* [22][0][][] */ -16,70,-18,-14,117,-40,-127,-52, 
  /* [23][0][][] */ 37,-38,26,127,-8,-68,73,-27, 
  /* [24][0][][] */ -36,67,127,-80,-6,-29,9,-55, 
  /* [25][0][][] */ -39,-123,96,75,26,13,-20,127, 
  /* [26][0][][] */ 57,41,-109,-119,-127,38,21,102, 
  /* [27][0][][] */ 24,127,-110,-56,-39,28,31,-113, 
  /* [28][0][][] */ 5,69,-80,-115,-12,-26,-127,-49, 
  /* [29][0][][] */ -117,7,-98,-52,127,21,-5,53, 
  /* [30][0][][] */ 83,-43,6,-12,-94,127,116,85, 
  /* [31][0][][] */ -48,61,-17,60,127,-44,-13,-12, 
  /* [32][0][][] */ 12,75,65,-24,127,-58,-12,-90, 
  /* [33][0][][] */ -127,52,-118,-14,48,51,-21,27, 
  /* [34][0][][] */ 80,-42,95,-102,-74,-127,58,78, 
  /* [35][0][][] */ -127,12,42,-12,-39,-3,17,31, 
  /* [36][0][][] */ 2,-42,-38,37,0,22,127,51, 
  /* [37][0][][] */ -34,-47,-94,-48,-39,-127,-88,-5, 
  /* [38][0][][] */ -94,14,-6,23,-127,36,13,19, 
  /* [39][0][][] */ 20,30,37,6,-50,126,-122,-127, 
  /* [40][0][][] */ 80,-117,26,75,-48,-71,127,76, 
  /* [41][0][][] */ 38,127,81,47,24,27,-79,-25, 
  /* [42][0][][] */ 25,127,-43,-24,-30,41,-7,-40, 
  /* [43][0][][] */ -51,-16,-101,-127,2,1,-16,79, 
  /* [44][0][][] */ -50,41,-56,19,37,127,5,15, 
  /* [45][0][][] */ 7,95,-64,-66,-61,-61,-7,127, 
  /* [46][0][][] */ 13,123,-91,-24,-81,44,5,-127, 
  /* [47][0][][] */ 15,13,-20,-109,-74,-127,-45,50, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.0012114121345803142, 0.0047858543694019318, 0.0031444288324564695, 0.0044318796135485172, 0.0044125756248831749, 0.002258313586935401, 0.0024099159054458141, 0.0043151825666427612, 0.00079596228897571564, 0.0013049927074462175, 0.002730388892814517, 0.0025577088817954063, 0.0038549865130335093, 0.0034582766238600016, 0.001748995971865952, 0.0023281476460397243, 0.0029102200642228127, 0.0030447323806583881, 0.0026717893779277802, 0.001435757614672184, 0.0023494982160627842, 0.0021215039305388927, 0.003419381333515048, 0.0049831867218017578, 0.0020133934449404478, 0.003913740161806345, 0.0028869698289781809, 0.0060708541423082352, 0.0021628797985613346, 0.0022936626337468624, 0.0023622165899723768, 0.0019190002931281924, 0.0027708723209798336, 0.0020912312902510166, 0.0032358935568481684, 0.0033013070933520794, 0.0025976041797548532, 0.0037426815833896399, 0.0048845419660210609, 0.0012280337978154421, 0.0033372277393937111, 0.0026678587310016155, 0.0052628843113780022, 0.0025953019503504038, 0.0019412051187828183, 0.0028596047777682543, 0.0032957512885332108, 0.0042126835323870182, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[8] = { 6810, -4689, -988, 2029, 3686, -17647, -4957, -6412, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 0.00026788996183313429, 0.0001547597348690033, 0.00026540172984823585, 0.000129994165035896, 0.00014175927208270878, 8.471867477055639e-05, 0.00014015602937433869, 0.00010838112939381972, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -25,23,3,28,-18,18,-3,30,-48,-17,-40,7,-19,13,39,0,-56,-28,37,-7,-26,127,-18,-20,-29,-40,0,44,-39,30,11,-22,-10,23,38,42,27,9,24,-19,-3,-38,-22,-10,-18,16,29,24, 
  /* [1][0][][] */ 14,59,15,52,31,55,33,111,-34,-42,83,-30,-32,-36,33,-21,-22,1,53,24,28,-127,-1,-69,-1,9,-19,21,-6,7,-31,-61,-44,0,32,-19,27,58,50,-13,16,39,42,-26,-32,53,9,48, 
  /* [2][0][][] */ 1,24,-5,27,22,-1,-22,38,15,2,62,31,7,-9,29,-55,22,22,-16,0,-20,127,6,-7,28,-43,-10,-6,-33,30,-16,-56,-15,13,17,-42,35,-13,-52,-26,22,-16,-14,-51,-32,23,15,30, 
  /* [3][0][][] */ -32,48,-15,-1,-19,43,70,7,-5,2,11,24,-21,48,48,16,-22,-10,8,-13,51,-84,-28,19,-15,7,-127,31,-41,-30,-13,6,-45,4,7,19,36,-12,-33,-25,3,-14,18,25,20,-13,43,33, 
  /* [4][0][][] */ 20,3,-45,5,14,-12,12,-11,-53,3,-9,22,3,-6,-14,12,-31,28,-25,-12,-2,-127,-13,-7,38,32,31,-45,41,-9,-2,8,-3,46,36,-7,-17,10,-7,4,3,-57,-89,18,31,25,-4,-16, 
  /* [5][0][][] */ -25,44,91,27,-3,6,19,-123,71,-26,-3,-9,88,-78,-2,10,32,-23,38,-4,-33,127,16,-3,94,10,87,41,100,62,-7,-44,-91,-66,105,46,-45,-49,-2,-117,30,-20,49,51,-47,-31,-39,-42, 
  /* [6][0][][] */ 68,6,-33,10,45,-6,44,-49,51,42,7,-29,-9,49,23,-63,23,-127,-24,-5,29,-17,-1,28,-39,-38,33,-9,49,-45,112,41,37,44,30,-62,-45,16,50,-23,-39,24,-66,71,33,6,48,-33, 
  /* [7][0][][] */ -15,47,35,51,-1,12,63,87,50,24,-12,82,-57,-4,36,-16,75,-16,-39,-29,-4,-127,-10,-109,-68,70,50,2,2,19,11,-20,35,-4,17,31,-28,94,-86,-24,7,-18,19,-19,-42,9,40,21, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.011385322548449039, 0.0065772887319326401, 0.011279573664069176, 0.0055247521959245205, 0.0060247690416872501, 0.0036005435977131128, 0.0059566311538219452, 0.0046061980538070202, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 29761, 20289, 12335, 8820, 2223, 9514, 16920, 9544, 49448, 1146, 1216, 23148, 19162, -2387, 3239, 1742, 6913, 27408, 20969, -1273, 4054, -10100, -286, -2187, 53748, 39669, 3935, 637, 1961, 16974, -485, 2068, -10560, 14576, 22696, 37768, 23847, 17318, -504, 2391, 5506, 41200, 995, 248, 1230, -2102, 18257, 10577, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 3.018896677531302e-05, 6.5258776885457337e-05, 0.00010915384336840361, 0.00013092556037008762, 0.00013298929843585938, 0.00010784470214275643, 9.3892325821798295e-05, 0.00011659158190013841, 3.8268837670329958e-05, 7.4456729635130614e-05, 6.650650902884081e-05, 5.1948194595752284e-05, 9.3777292931918055e-05, 5.6033197324723005e-05, 8.0078272731043398e-05, 7.0021844294387847e-05, 3.4954166039824486e-05, 7.4562434747349471e-05, 6.9543486461043358e-05, 0.00013971753651276231, 7.1579604991711676e-05, 0.00026493941550143063, 0.00015721366798970848, 9.6156167273875326e-05, 4.0075166907627136e-05, 4.9409256462240592e-05, 4.8972498916555196e-05, 0.00010858066525543109, 4.3386229663155973e-05, 6.7784174461849034e-05, 0.00014539116818923503, 0.00022931622515898198, 7.9689634731039405e-05, 4.7938010538928211e-05, 9.9429416877683252e-05, 9.4211485702544451e-05, 0.00011437454668339342, 0.00010573011968517676, 0.00014266808284446597, 6.4906045736279339e-05, 0.00011233556142542511, 3.8040441722841933e-05, 8.0608821008354425e-05, 7.9215576988644898e-05, 0.00022783644089940935, 0.00011302629718557, 8.2496080722194165e-05, 0.00013115399633534253, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -52,-77,-44,-30,-83,78,-74,-84,-100,59,88,-102,-2,76,14,18,53,-49,-60,117,21,62,-75,116,-90,-100,121,32,89,-103,101,127,127,-24,-92,-72,-127,-40,113,60,-33,38,15,41,119,127,-45,-127, -42,-127,-58,-77,-96,71,-113,-86,-69,106,127,-115,-77,35,-112,65,57,-93,-107,6,39,98,81,116,-56,-97,120,31,105,-116,90,83,65,-78,-96,-44,-78,-102,127,93,-85,-31,65,50,-69,78,-47,-84, 5,-15,-64,-18,-75,50,-45,-10,-67,18,85,-55,-74,80,24,48,42,16,-37,-31,-17,-127,-39,98,-31,-117,104,-15,72,-74,71,56,71,89,-52,-91,-53,-16,40,78,-116,-38,27,39,-125,93,-16,-61, 
  /* [0][1][][] */ -102,-76,-96,-70,-54,-64,-111,-101,-51,107,46,-121,-65,74,-54,81,127,-100,-70,127,79,87,-37,91,-127,-115,78,119,85,-88,90,25,65,-100,-127,-118,-57,-26,52,113,-53,3,59,53,39,103,-84,2, -127,-120,-127,-127,-28,-82,-127,-127,-127,127,60,-127,-109,50,-113,127,127,-127,-41,-43,127,77,127,127,-115,-126,127,61,127,-100,127,106,62,-121,-98,-127,-54,-127,72,127,-108,-54,127,127,2,76,-127,-66, -50,18,-67,8,-127,-110,-89,-86,-46,107,26,-18,-72,87,4,64,88,-58,-70,-88,42,-125,-78,73,-70,-127,48,1,83,-76,35,18,56,-102,-35,-89,-70,-62,22,41,-76,-49,61,68,-127,61,-45,-62, 
  /* [0][2][][] */ -83,-56,-19,-8,-49,-70,-73,-53,15,100,53,-94,-79,35,-35,18,13,-59,-127,85,80,31,-30,60,-60,-5,45,90,44,-30,-34,17,33,-77,-52,-91,-45,0,-1,1,-92,-122,67,52,3,0,-74,7, -108,-57,-34,-54,-49,-127,-85,-79,-3,71,68,-46,-127,65,-127,12,43,-50,-57,-100,38,10,9,29,-60,-7,49,127,92,-78,-9,9,16,-127,-68,-84,-44,-61,-7,12,-127,-127,75,69,-109,-43,-56,-44, -94,67,-58,-22,37,-53,-55,-47,-34,55,37,-33,-57,127,40,3,81,-27,-12,-85,-4,-61,-8,20,10,29,36,74,23,-127,-31,3,-22,-123,-2,-101,-38,-19,-9,-13,-112,-62,51,40,-83,13,-19,-31, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0012830310733988881, 0.0027734979521483183, 0.0046390383504331112, 0.0055643361993134022, 0.0056520448997616768, 0.0045833997428417206, 0.0039904238656163216, 0.0049551422707736492, 0.0016264255391433835, 0.0031644108239561319, 0.002826526528224349, 0.0022077981848269701, 0.0039855348877608776, 0.0023814109154045582, 0.0034033264964818954, 0.0029759283643215895, 0.0014855520566925406, 0.003168903524056077, 0.0029555980581790209, 0.0059379953891038895, 0.0030421330593526363, 0.011259924620389938, 0.0066815810278058052, 0.0040866369381546974, 0.0017031945753842592, 0.0020998932886868715, 0.0020813310984522104, 0.0046146782115101814, 0.001843914738856256, 0.0028808272909373045, 0.0061791245825588703, 0.0097459396347403526, 0.0033868092577904463, 0.0020373654551804066, 0.0042257499881088734, 0.0040039881132543087, 0.0048609180375933647, 0.0044935299083590508, 0.0060633933171629906, 0.0027585069183260202, 0.0047742612659931183, 0.0016167187131941319, 0.0034258749801665545, 0.0033666619565337896, 0.009683048352599144, 0.0048036174848675728, 0.0035060832742601633, 0.0055740447714924812, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 508, 1701, 2132, -668, -1448, 921, 5941, 3110, 2757, -5545, 1587, 314, 3904, 318, 895, -1281, -317, 4255, 1476, 1833, -276, 23600, 2000, -872, 1887, 2734, 1824, -1228, -18, 364, -1873, -1485, 2418, 863, 4569, 13092, 7208, 5129, -2615, -1922, -944, 2145, 2194, 637, -3554, -1872, 3287, 1032, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00036558049032464623, 0.00026323279598727822, 0.00026048393920063972, 0.00031277374364435673, 0.00023913470795378089, 0.0002270326076541096, 0.0001302146993111819, 0.00019557889027055353, 0.0002318795450264588, 0.00012480170698836446, 0.00025191911845467985, 0.00030156571301631629, 0.00017026755085680634, 0.00039021129487082362, 0.00035053590545430779, 0.00021041324362158775, 0.0005053907516412437, 0.00013954522728454322, 0.00021568419469986111, 0.00019646839064080268, 0.00038467254489660263, 6.7388071329332888e-05, 0.00023078609956428409, 0.00027484731981530786, 0.00022093202278483659, 0.00024832141934894025, 0.00032911714515648782, 0.00035048866993747652, 0.00042270726407878101, 0.00035762949846684933, 0.00020960770780220628, 0.00021310201555024832, 0.00025950904819183052, 0.00034350997884757817, 0.00017731786647345871, 8.1070094893220812e-05, 0.0001385727955494076, 0.00015617116878274828, 0.00020462420070543885, 0.00021255650790408254, 0.00030905878520570695, 0.00024802121333777905, 0.00017012398166116327, 0.00034291055635549128, 0.00015133885608520359, 0.00024672146537341177, 0.00017215729167219251, 0.00023355003213509917, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -13,39,-65,44,16,127,28,5, 
  /* [1][0][][] */ 59,-127,-103,-38,-26,48,35,-5, 
  /* [2][0][][] */ -13,54,-1,-73,-40,-127,-30,-64, 
  /* [3][0][][] */ 3,127,68,39,15,-62,-41,49, 
  /* [4][0][][] */ -89,44,-127,70,-24,-2,-44,-64, 
  /* [5][0][][] */ 55,-108,-127,77,26,-4,85,-38, 
  /* [6][0][][] */ -17,-95,-80,13,-127,-28,-62,68, 
  /* [7][0][][] */ -1,-31,-15,-36,46,2,-28,127, 
  /* [8][0][][] */ 5,13,-84,-74,28,-30,-127,-74, 
  /* [9][0][][] */ -121,67,-39,87,-13,48,127,-2, 
  /* [10][0][][] */ -47,-10,85,-127,-21,69,20,52, 
  /* [11][0][][] */ 89,0,127,32,-59,52,88,104, 
  /* [12][0][][] */ 51,29,12,-48,50,114,64,-127, 
  /* [13][0][][] */ 29,72,-52,66,9,-127,-51,59, 
  /* [14][0][][] */ 8,-127,-19,-44,-8,65,26,-7, 
  /* [15][0][][] */ -127,-34,-14,-70,75,123,-108,-31, 
  /* [16][0][][] */ 7,-43,97,11,-32,5,127,62, 
  /* [17][0][][] */ 72,40,83,2,-16,-113,-38,-127, 
  /* [18][0][][] */ -127,3,-95,-39,-26,-126,12,-110, 
  /* [19][0][][] */ 64,6,99,-24,-121,23,123,127, 
  /* [20][0][][] */ 21,127,61,-7,27,60,45,26, 
  /* [21][0][][] */ -50,33,1,-94,-71,127,9,-11, 
  /* [22][0][][] */ 15,-3,45,-14,-64,3,127,100, 
  /* [23][0][][] */ -66,88,39,41,-63,-78,-82,127, 
  /* [24][0][][] */ -22,-4,88,24,-125,127,6,-76, 
  /* [25][0][][] */ -44,37,94,24,-127,42,-71,12, 
  /* [26][0][][] */ -58,-127,30,-32,13,42,1,-20, 
  /* [27][0][][] */ -28,90,47,54,-31,127,-38,-9, 
  /* [28][0][][] */ -9,-127,46,31,54,96,57,28, 
  /* [29][0][][] */ 17,127,-24,31,-77,-64,-7,20, 
  /* [30][0][][] */ -74,62,87,81,-127,-57,-28,-79, 
  /* [31][0][][] */ 9,48,20,48,-51,-17,22,-127, 
  /* [32][0][][] */ -28,-36,-62,76,-127,-35,-38,1, 
  /* [33][0][][] */ 89,13,55,53,-33,71,56,127, 
  /* [34][0][][] */ 127,6,-114,-49,-59,-14,51,58, 
  /* [35][0][][] */ 104,106,96,-108,-54,-99,51,127, 
  /* [36][0][][] */ -39,-98,127,44,38,48,15,-62, 
  /* [37][0][][] */ -4,10,-12,-14,-1,-49,-42,127, 
  /* [38][0][][] */ 127,6,63,2,-6,33,-52,33, 
  /* [39][0][][] */ 33,43,-107,-127,-109,94,72,-50, 
  /* [40][0][][] */ -22,127,-45,89,-25,-6,-42,-15, 
  /* [41][0][][] */ -127,54,-43,-63,98,43,-29,-118, 
  /* [42][0][][] */ 36,-39,-3,-24,-28,127,17,85, 
  /* [43][0][][] */ -53,29,127,18,79,23,-32,12, 
  /* [44][0][][] */ 8,127,-3,33,-38,-70,-12,-13, 
  /* [45][0][][] */ -86,127,86,-101,-68,40,-37,-68, 
  /* [46][0][][] */ 74,-73,-23,42,44,20,-127,78, 
  /* [47][0][][] */ -127,-81,18,61,58,-79,44,62, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0039945151656866074, 0.0028762132860720158, 0.0028461779002100229, 0.0034175224136561155, 0.0026129053439944983, 0.0024806717410683632, 0.0014227909268811345, 0.0021369927562773228, 0.0025336318649351597, 0.0013636457733809948, 0.0027525941841304302, 0.0032950579188764095, 0.0018604283686727285, 0.004263643641024828, 0.0038301306776702404, 0.0022990803699940443, 0.0055221519432961941, 0.0015247409464791417, 0.0023566733580082655, 0.0021467118058353662, 0.0042031244374811649, 0.00073631573468446732, 0.002521684393286705, 0.003003119258210063, 0.0024140137247741222, 0.0027132839895784855, 0.0035960983950644732, 0.0038296144921332598, 0.0046187108382582664, 0.0039076386019587517, 0.0022902786731719971, 0.0023284591734409332, 0.0028355256654322147, 0.0037533617578446865, 0.0019374636467546225, 0.0008858123910613358, 0.0015141156036406755, 0.0017064042622223496, 0.0022358263377100229, 0.0023224987089633942, 0.0033769309520721436, 0.0027100036386400461, 0.0018588596722111106, 0.0037468122318387032, 0.0016536039765924215, 0.0026958021335303783, 0.0018810766050592065, 0.0025518843904137611, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 5399, -14402, 2377, 3407, 4148, -2641, 3464, 4398, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.0001637769746594131, 0.00013733912783209234, 8.558917761547491e-05, 0.00013946257240604609, 0.00031659181695431471, 0.00012908646021969616, 0.00019225556752644479, 0.00012001418508589268, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -21,-16,-6,-25,-80,-17,-4,-15,65,5,11,-13,6,25,-25,12,-34,19,-20,-20,9,22,-19,0,21,0,97,13,-9,-87,-23,12,1,51,127,-11,-18,-36,37,-59,15,25,4,-20,-2,-12,-17,-86, 
  /* [1][0][][] */ 20,-31,-13,72,-1,-5,21,39,62,77,45,-44,-54,91,-4,5,0,-28,18,-22,-65,55,-45,32,95,24,-28,40,29,-2,127,25,-12,-21,-34,-6,-20,13,-18,-10,5,-8,9,17,2,25,29,21, 
  /* [2][0][][] */ -69,12,-74,104,-31,-56,27,-72,-88,37,68,-78,-33,-4,-48,-14,113,21,-67,-32,-62,1,-35,22,86,-42,98,12,59,-4,-65,8,-6,-13,35,7,-56,41,-2,-109,66,-64,-58,-127,15,-78,-82,83, 
  /* [3][0][][] */ 21,-34,18,-48,53,-17,-4,-79,44,-62,15,-24,-75,-73,-5,1,24,-3,28,-42,-23,28,-80,-2,88,-31,46,29,9,0,2,-20,-32,41,27,-37,-57,7,2,5,127,24,-50,38,-44,40,-15,-48, 
  /* [4][0][][] */ 24,3,14,3,-3,38,-16,-7,51,24,8,-48,-3,-3,-70,15,-8,21,28,-33,-30,16,6,47,30,-2,-33,8,52,-20,-18,29,-4,-14,40,23,-127,-12,51,17,11,-18,-9,23,-37,62,-34,-98, 
  /* [5][0][][] */ -40,-90,17,93,-24,-8,-61,110,-90,76,66,19,-80,3,68,-48,-24,32,21,-6,2,17,47,53,-59,-3,-26,37,-50,-98,45,31,-121,-64,-37,2,127,-12,-24,15,-28,-34,68,104,30,41,51,57, 
  /* [6][0][][] */ 81,2,-12,-5,94,-39,-27,-76,43,23,34,-40,-7,22,21,1,0,-4,-5,-25,-28,16,12,7,53,-63,38,-5,-15,101,-15,1,35,21,-127,-12,-73,-30,25,-58,-17,-9,-11,-80,2,2,-16,-17, 
  /* [7][0][][] */ -34,-71,68,-29,11,127,36,-40,7,-83,-37,8,-1,-23,-62,-5,-7,-69,127,57,32,-19,4,-4,-31,7,113,-20,37,35,11,0,-35,-36,-28,95,-108,94,-33,-39,-56,58,6,-57,12,4,77,-13, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0069605214521288872, 0.0058369128964841366, 0.0036375399213284254, 0.0059271589852869511, 0.013455151580274105, 0.0054861744865775108, 0.0081708617508411407, 0.005100602749735117, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { 11954, 2340, 244, 7634, 311, -301, 7723, 2791, 2828, 5056, -922, 85, -3746, 11956, 4920, -641, -6002, -316, 1220, -370, 9815, 243, -20836, -320, -2405, -3019, -98, -670, -1587, -3290, -3911, 1371, 10976, -2134, -1661, 766, -2029, 175, -1703, 2241, 16678, -2191, 2940, 1313, 812, -372, -5656, 5702, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.0001847911044023931, 0.00030141926254145801, 0.00024627667153254151, 0.00028339968412183225, 0.00035720993764698505, 0.00063414475880563259, 0.00016700505511835217, 0.00027807240257970989, 8.8087210315279663e-05, 0.00018471431394573301, 0.00038174443761818111, 0.00032471996382810175, 0.00032073707552626729, 0.00023351184790953994, 0.00025425810599699616, 0.0004510393482632935, 5.0113576435251161e-05, 0.0025071785785257816, 0.00036489302874542773, 0.00030561289167962968, 9.3412782007362694e-05, 0.00048526935279369354, 9.8097822046838701e-05, 0.00023236710694618523, 0.00029843926313333213, 0.00031437780125997961, 0.00032811600249260664, 0.00033575727138668299, 0.00048087092000059783, 0.00018538754375185817, 0.00025342349545098841, 0.00055163103388622403, 8.1009442510548979e-05, 0.000450414780061692, 0.00015241075016092509, 0.0010728390188887715, 0.00014111964264884591, 0.00020944599236827344, 0.00096431956626474857, 0.0003796566161327064, 5.7812612794805318e-05, 0.00031048155506141484, 0.00012942100875079632, 0.0001388645323459059, 0.00024814342032186687, 0.00042363815009593964, 0.00011369893763912842, 0.00036270209238864481, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -73,43,-44,-46,-2,-20,14,-14,-13,-13,22,31,-8,-127,-90,34,103,0,44,30,-93,-61,97,-68,-23,-23,-4,106,-17,23,11,127,30,-11,-4,14,-3,-82,2,16,105,-77,-50,32,62,-120,-18,-1, -12,-127,46,-127,0,-26,-59,127,43,-86,35,21,20,-125,-81,9,-56,14,-40,-73,-69,0,111,127,0,15,12,127,29,6,-36,-113,-102,31,3,-22,127,-127,58,-8,-6,-111,-73,18,93,76,25,-27, -22,-1,24,-29,-1,26,3,55,-24,13,9,27,12,32,-88,32,9,20,-41,18,-106,39,73,27,-30,77,6,-13,-15,5,-45,-39,-30,5,8,-9,-17,119,-10,7,87,-50,-3,-37,37,39,-43,-7, 
  /* [0][1][][] */ -57,-17,-121,-8,-28,28,-6,-2,11,-57,0,-92,-32,-55,-127,127,102,10,127,77,-7,127,117,67,11,-45,-36,10,58,-26,44,-118,68,-18,-37,25,-21,-119,51,19,87,127,-21,-20,-79,127,78,-34, -127,50,127,104,127,-117,-127,-23,-10,-127,-127,-127,127,-10,-16,46,-17,-127,-106,-127,127,-8,-73,-74,127,-23,127,-49,127,127,-43,78,-127,-127,127,-127,68,-79,-127,-127,26,106,-104,5,-127,-67,127,127, -42,9,5,15,32,127,-28,42,45,9,51,-44,-19,-4,-68,-5,23,58,-12,53,-25,-118,127,-12,-3,127,17,14,52,31,127,31,5,26,63,13,-22,97,57,-11,31,74,94,-17,-73,-57,72,-4, 
  /* [0][2][][] */ -21,13,-79,-2,-3,-17,14,-29,20,22,4,33,6,-34,61,19,92,5,56,20,-85,-9,99,4,-19,-44,-15,-57,18,-6,8,-43,15,66,-4,5,-81,11,0,7,10,-5,-36,-58,-12,6,-16,-40, -6,-29,27,-11,-90,-24,-70,-106,127,48,41,33,10,-26,20,25,127,105,-47,-13,-66,3,67,-23,-8,-38,-69,-67,3,-29,98,25,-49,62,-57,-5,28,-86,42,46,-127,-5,-127,127,34,11,75,-46, 0,-2,-4,-11,-48,20,-8,-113,7,-9,-28,21,9,28,91,-101,45,-20,-50,0,-97,5,46,-13,-19,43,-30,11,5,-22,24,13,-8,72,-30,7,-103,126,-13,27,14,-22,20,47,-18,-13,-44,-17, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.0078536216169595718, 0.012810318730771542, 0.010466758161783218, 0.012044486589729786, 0.015181422233581543, 0.026951150968670845, 0.0070977145805954933, 0.011818076483905315, 0.0037437065038830042, 0.0078503582626581192, 0.01622413843870163, 0.013800597749650478, 0.013631325215101242, 0.009924253448843956, 0.010805969126522541, 0.019169172272086143, 0.0021298269275575876, 0.10655508935451508, 0.015507953241467476, 0.012988547794520855, 0.0039700432680547237, 0.020623946562409401, 0.0041691572405397892, 0.009875602088868618, 0.012683668173849583, 0.013361056335270405, 0.013944929465651512, 0.014269683510065079, 0.020437013357877731, 0.0078789703547954559, 0.010770497843623161, 0.023444317281246185, 0.003442901186645031, 0.019142627716064453, 0.0064774570055305958, 0.045595657080411911, 0.0059975846670567989, 0.0089014545083045959, 0.040983580052852631, 0.016135405749082565, 0.0024570359382778406, 0.013195466250181198, 0.0055003929883241653, 0.00590174226090312, 0.010546095669269562, 0.01800462044775486, 0.0048322048969566822, 0.015414838679134846, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 5430, 969, 3586, 7071, 385, 3496, 1630, 3025, 2701, 5052, 1661, 5744, 4232, 2588, 3307, -812, 244, -3128, 4312, 2468, 1245, 5662, 6933, 821, 2345, 2515, 3257, -152, -1770, 1077, 8306, 2373, 728, 469, 808, -613, 251, 2343, -34, 2235, 1408, 4773, 2226, 703, 2245, 875, -246, 8757, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00017745961667969823, 0.00044230971252545714, 0.00022434236598201096, 0.00015115381393115968, 0.0012195968301966786, 0.00018023239681497216, 0.00038294613477773964, 0.00023647320631425828, 0.00022000378521624953, 0.00015869864728301764, 0.0003881815355271101, 0.00011597447883104905, 0.00022148717835079879, 0.0001890635903691873, 0.00019380122830625623, 0.00022033801360521466, 0.00037188245914876461, 0.00024422310525551438, 0.00019614298071246594, 0.00041939265793189406, 0.00056235893862321973, 0.00014417545753531158, 0.00012762770347762853, 0.00037618621718138456, 0.00022842059843242168, 0.00035047726123593748, 0.00025254726642742753, 0.00044971756869927049, 0.00026200414868071675, 0.00083390512736514211, 0.00011817258200608194, 0.00031808784115128219, 0.00059583567781373858, 0.00034042345941998065, 0.00077960372436791658, 0.00027924854657612741, 0.00025655434001237154, 0.000183172567631118, 0.00023853470338508487, 0.00035334884887561202, 0.00029861991060897708, 0.00017501703405287117, 0.0001730261865304783, 0.00031003562617115676, 0.00023431713634636253, 0.00048515910748392344, 0.00046526108053512871, 0.00010999562073266134, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -118,-20,1,-96,-106,127,9,-73, 
  /* [1][0][][] */ 98,-1,14,-33,9,65,-127,50, 
  /* [2][0][][] */ -33,28,-110,79,-43,127,5,52, 
  /* [3][0][][] */ 114,-19,-25,67,1,-66,32,127, 
  /* [4][0][][] */ -90,-8,-10,11,-25,-33,127,-1, 
  /* [5][0][][] */ 29,127,54,12,-119,-85,41,-7, 
  /* [6][0][][] */ -4,-57,36,125,-18,-127,-28,20, 
  /* [7][0][][] */ 127,-18,103,27,-60,12,33,113, 
  /* [8][0][][] */ -43,-127,53,38,89,-42,-47,15, 
  /* [9][0][][] */ -77,-108,15,-32,-13,16,-47,127, 
  /* [10][0][][] */ -48,-87,18,127,30,85,-17,-13, 
  /* [11][0][][] */ -111,-111,19,-68,52,44,-34,127, 
  /* [12][0][][] */ 80,-11,91,-80,39,-127,78,13, 
  /* [13][0][][] */ 47,8,25,127,-18,19,57,-70, 
  /* [14][0][][] */ -16,-1,24,4,127,1,15,114, 
  /* [15][0][][] */ -58,127,20,55,109,109,-44,95, 
  /* [16][0][][] */ 26,-16,-86,-127,-74,73,36,43, 
  /* [17][0][][] */ 49,127,-8,61,-94,-93,-31,35, 
  /* [18][0][][] */ 10,54,-16,-127,-66,-95,40,-32, 
  /* [19][0][][] */ 16,-76,-109,-127,-92,66,22,3, 
  /* [20][0][][] */ 18,-1,-1,-12,127,24,25,-42, 
  /* [21][0][][] */ -127,-87,-79,-45,62,57,37,-5, 
  /* [22][0][][] */ -61,-46,61,127,40,-34,-23,97, 
  /* [23][0][][] */ 9,-8,-45,127,102,28,58,80, 
  /* [24][0][][] */ 99,6,-127,-15,-15,4,40,-19, 
  /* [25][0][][] */ 14,6,-56,-11,75,-43,-127,-75, 
  /* [26][0][][] */ 118,13,118,-46,-105,45,48,127, 
  /* [27][0][][] */ -5,-27,-14,127,21,-36,-35,-61, 
  /* [28][0][][] */ -48,127,62,61,63,-22,-24,2, 
  /* [29][0][][] */ 5,12,54,10,-75,-3,127,61, 
  /* [30][0][][] */ -56,-71,41,-65,-69,127,51,46, 
  /* [31][0][][] */ 101,35,127,-42,-122,35,77,84, 
  /* [32][0][][] */ -97,-15,-43,36,-19,21,127,30, 
  /* [33][0][][] */ -88,127,26,77,31,-5,-52,2, 
  /* [34][0][][] */ 117,13,23,-23,6,49,-127,15, 
  /* [35][0][][] */ -4,1,17,35,-35,27,12,-127, 
  /* [36][0][][] */ 23,6,-66,-104,33,-28,6,127, 
  /* [37][0][][] */ 85,-66,-52,-62,1,62,46,-127, 
  /* [38][0][][] */ 68,127,27,106,-58,-71,-18,9, 
  /* [39][0][][] */ 99,-14,119,-27,-113,40,127,108, 
  /* [40][0][][] */ -60,-67,127,99,-19,-31,-108,31, 
  /* [41][0][][] */ 38,-62,-15,43,11,-48,25,127, 
  /* [42][0][][] */ 66,-104,-77,-103,-45,93,58,-127, 
  /* [43][0][][] */ 95,0,111,-46,-72,-24,107,127, 
  /* [44][0][][] */ -104,-30,-26,127,84,7,-97,45, 
  /* [45][0][][] */ 127,-12,66,0,-25,38,7,69, 
  /* [46][0][][] */ 58,-91,11,84,127,1,74,7, 
  /* [47][0][][] */ 37,127,14,108,-26,-100,26,-63, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00206780806183815, 0.0051539139822125435, 0.0026140986010432243, 0.001761285588145256, 0.014211076311767101, 0.0021001172717660666, 0.0044621932320296764, 0.0027554505504667759, 0.0025635443162173033, 0.0018491999944671988, 0.0045231976546347141, 0.0013513664016500115, 0.0025808291975408792, 0.0022030207328498363, 0.0022582248784601688, 0.0025674388743937016, 0.0043332763016223907, 0.0028457546140998602, 0.0022855116985738277, 0.0048868781886994839, 0.0065527604892849922, 0.0016799718141555786, 0.0014871530001983047, 0.0043834247626364231, 0.0026616193354129791, 0.0040838569402694702, 0.0029427497647702694, 0.0052402322180569172, 0.0030529440846294165, 0.0097168907523155212, 0.0013769792858511209, 0.0037064466159790754, 0.0069428402930498123, 0.0039667072705924511, 0.0090841557830572128, 0.0032538804225623608, 0.0029894413892179728, 0.0021343769039958715, 0.0027794716879725456, 0.0041173174977302551, 0.0034796008840203285, 0.0020393463782966137, 0.002016148529946804, 0.0036126200575381517, 0.0027303274255245924, 0.0056532067246735096, 0.0054213493131101131, 0.0012816990492865443, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 3833, 1848, -493, 10677, 7067, 9839, 3483, -2891, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0001436924358131364, 0.00012422788131516427, 0.00015180399350356311, 0.00014047043805476278, 0.00011973912478424609, 9.7946169262286276e-05, 0.00010653500066837296, 0.00025026500225067139, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -27,32,-14,1,-46,-29,-90,29,5,20,32,34,34,3,-37,11,-47,40,16,-74,34,42,-127,-2,-27,12,-20,49,-12,-17,25,15,8,-24,33,25,3,126,-61,-11,-15,26,-12,34,8,-4,14,-11, 
  /* [1][0][][] */ -82,-110,-58,16,88,-28,-124,60,-7,-40,-8,-103,-13,93,8,-16,106,-127,1,-21,-58,8,-6,-21,42,0,-27,-57,28,-29,-116,-20,33,-60,-86,-97,55,5,-103,-8,12,41,12,98,-11,19,-9,65, 
  /* [2][0][][] */ 8,-75,9,56,107,6,92,-14,-33,-31,-10,-49,1,-27,16,37,-34,-96,50,-56,-1,-67,-57,7,-68,70,82,-102,-35,1,-54,-44,14,5,-66,-43,10,127,78,-31,-7,15,-17,-75,38,18,54,-30, 
  /* [3][0][][] */ 6,13,26,-17,33,47,20,-96,28,15,-19,11,-3,-108,-9,7,-39,-3,-37,3,-18,57,-127,17,-4,-109,45,28,50,-14,-18,50,11,5,-6,-46,-101,-39,8,-11,-6,5,38,0,-24,9,9,-58, 
  /* [4][0][][] */ 30,-43,14,71,56,5,-29,-12,-41,-7,25,-30,68,19,-27,34,-36,-47,58,31,33,-46,127,26,-42,10,-73,-14,-23,18,-82,-41,80,-38,-48,-58,-48,-44,-23,-1,-58,95,3,0,58,86,53,18, 
  /* [5][0][][] */ -71,-21,-38,49,-14,3,3,-55,-74,-27,1,-18,17,27,-68,14,115,-15,58,-69,37,-99,-2,-20,97,-103,-127,-5,47,-39,34,-70,2,-46,-44,36,-75,-26,18,-23,-38,45,92,41,52,13,23,-74, 
  /* [6][0][][] */ -30,8,-46,34,-23,79,-68,10,-22,0,-127,14,48,47,118,16,18,11,39,-9,37,-18,-48,-17,22,0,-65,18,9,-47,14,-22,38,-41,12,-1,1,-7,-55,-28,-35,45,-30,19,25,28,30,0, 
  /* [7][0][][] */ 30,-2,40,-16,1,8,12,-12,12,8,-8,-5,-9,-4,-1,-13,11,0,-21,-22,-17,12,127,14,-1,-16,1,11,4,-12,-20,14,2,22,-1,-18,-7,19,9,26,3,3,14,-2,-12,-4,-22,11, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0061069284565746784, 0.0052796849049627781, 0.0064516696147620678, 0.0059699937701225281, 0.0050889127887785435, 0.0041627120226621628, 0.0045277373865246773, 0.010636262595653534, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 11528, 1084, -3339, -848, 8858, 3530, -162, 2725, -6152, -260, -2563, 2005, -55, -715, -1188, 1044, 20897, -2262, -169, 36764, -1586, 17218, 166, -1645, 634, -9182, 13253, -652, 888, -376, 1576, 4897, 546, 1254, 8494, 772, 7553, -3650, 7555, -3151, -250, -173, 17177, -5314, 2140, 918, 526, 195, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 4.7440029447898269e-05, 0.00016587773279752582, 0.00058777042431756854, 0.0010355517733842134, 0.00011575691314646974, 0.00022812680981587619, 9.654960740590468e-05, 0.0003600357158575207, 0.00020293612033128738, 0.00041723466711118817, 5.3219384426483884e-05, 0.00031736024538986385, 0.0012132517294958234, 0.00018055213149636984, 0.00012091722601326182, 0.0045433267951011658, 8.5685773228760809e-05, 0.00015655388415325433, 0.00084432883886620402, 5.7969551562564448e-05, 0.0013020032783970237, 7.4937866884283721e-05, 0.00029578575049526989, 0.00015887337212916464, 0.0002168053324567154, 0.00054392102174460888, 0.000109791690192651, 0.00028551925788633525, 0.00069021614035591483, 0.00055010936921462417, 0.00020383336232043803, 7.482436194550246e-05, 0.0010300035355612636, 0.0010367067297920585, 0.00020531169138848782, 0.00025906693190336227, 0.00014649168588221073, 8.677848381921649e-05, 6.6852880991064012e-05, 0.00030878750840201974, 0.00029285525670275092, 0.00061352801276370883, 6.8361710873432457e-05, 0.00015831019845791161, 0.0010585157433524728, 0.000788776611443609, 0.0037251098547130823, 0.00078751106048002839, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ 64,-30,-59,-87,33,-117,49,-85,85,12,127,51,-90,59,75,-123,66,-87,1,-31,-127,-49,36,82,-19,84,-56,91,-127,-4,43,-62,-49,-66,43,96,-127,32,61,83,-70,-127,-7,30,-79,-40,0,-83, 98,-52,91,127,80,14,127,-118,-51,89,81,70,6,58,70,108,70,-89,-109,-43,84,-79,51,2,63,127,-66,100,-4,40,45,-78,47,113,127,127,-90,29,96,-15,86,29,3,78,127,113,-11,-10, 1,-12,4,-31,38,34,7,-99,6,36,-50,30,94,-9,-47,-11,24,-29,79,-6,34,7,-83,-96,-9,12,-37,39,20,76,31,28,-6,-44,14,42,-16,4,-23,-45,-77,105,20,108,-70,-99,-10,76, 
  /* [0][1][][] */ 74,74,-113,19,-72,-127,51,-97,127,-78,123,-96,94,73,127,115,-48,118,-3,-98,123,-94,48,127,-13,-5,-12,43,-66,103,59,-81,-127,-79,-33,27,-9,98,81,127,-94,-80,-122,44,-8,-34,-127,-127, 127,127,127,-16,-127,9,83,-127,-78,-127,91,-127,41,127,102,-127,-36,127,127,-127,-55,-127,71,-18,43,4,-127,98,-4,127,127,-127,121,127,-57,4,-6,127,127,-30,127,-11,-65,97,-21,127,117,45, 1,39,6,13,-41,74,21,-100,21,-97,-64,-79,-127,-5,-64,-8,34,33,-98,-48,-40,-9,-127,-100,-32,2,-79,16,28,53,31,45,7,-64,-31,-7,17,37,-13,-67,-87,84,0,127,-3,-109,-2,96, 
  /* [0][2][][] */ 7,-54,-14,-4,30,3,-15,-23,92,23,15,35,-3,46,-27,-22,-127,-32,-6,-46,22,-18,11,62,102,-7,-82,-96,24,14,-21,-38,-31,-47,-107,-4,68,51,-25,78,-127,-46,-127,36,-2,-10,92,-66, 45,-77,18,-4,20,23,7,-19,-56,71,-6,50,-26,74,-16,6,-94,-32,-13,-72,-20,-40,29,14,127,-5,-98,-127,17,22,0,-57,26,80,-117,7,77,73,48,-13,-53,0,-59,68,-7,-19,-98,59, -9,-42,25,5,-6,31,-2,-13,16,49,-32,14,13,-2,-29,-10,21,-13,17,-42,16,2,-41,-39,6,2,-49,-39,16,11,-7,41,-5,-39,-88,0,71,45,-35,-31,-127,48,-47,75,4,-11,-2,12, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0020162011496722698, 0.0070498036220669746, 0.024980243295431137, 0.0440109483897686, 0.0049196686595678329, 0.0096953893080353737, 0.004103358369320631, 0.015301518142223358, 0.0086247846484184265, 0.017732473090291023, 0.0022618237417191267, 0.013487810268998146, 0.051563199609518051, 0.0076734656468033791, 0.0051389820873737335, 0.19309137761592865, 0.0036416451912373304, 0.0066535398364067078, 0.03588397428393364, 0.002463705837726593, 0.055335137993097305, 0.0031848594080656767, 0.012570894323289394, 0.0067521184682846069, 0.0092142261564731598, 0.023116642609238625, 0.0046661468222737312, 0.012134567834436893, 0.029334185644984245, 0.023379648104310036, 0.0086629176512360573, 0.0031800353899598122, 0.043775148689746857, 0.044060036540031433, 0.0087257465347647667, 0.011010344140231609, 0.0062258965335786343, 0.0036880855914205313, 0.0028412474785000086, 0.013123469427227974, 0.012446348555386066, 0.026074940338730812, 0.0029053725302219391, 0.0067281834781169891, 0.044986918568611145, 0.033523004502058029, 0.15831716358661652, 0.033469218760728836, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { -1169, -8771, 7609, 5366, 9315, 3245, 2767, 116, -2463, -6319, -11, 6375, 17480, -10660, 62, 2958, -5274, -2630, 5467, 3955, 12414, 4321, 1041, 162, 12976, 18818, 8816, -11380, 2518, -2393, -937, -2411, 16607, 9488, 12260, 378, -10242, 1020, -2581, -9, -11831, -10028, -118, 2372, 4674, -11185, 2996, -1133, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00026345654623582959, 0.0003095683641731739, 0.00010278565605403855, 0.00017891124298330396, 0.00032853224547579885, 0.0010614934144541621, 0.001071122707799077, 0.00055628846166655421, 0.00065662385895848274, 0.00062848883680999279, 0.0032898054923862219, 0.00021515478147193789, 8.2788137660827488e-05, 0.00043302707490511239, 0.0011881903046742082, 8.1067075370810926e-05, 0.00037499918835237622, 0.00055356405209749937, 0.0001872501743491739, 0.00030918591073714197, 0.00010046530951512977, 0.0015682283556088805, 0.0003786804445553571, 0.00086277071386575699, 0.00022635304776486009, 0.00013425502402242273, 0.00054354587337002158, 0.00037398521089926362, 0.0007176549406722188, 0.00036037722020410001, 0.00069202185841277242, 0.0012397641548886895, 0.0001637381938053295, 0.00021912349620833993, 0.00022316626564133912, 0.00057127111358568072, 0.00048440968384966254, 0.00025818560970947146, 0.00083580717910081148, 0.00030783834517933428, 0.00033977261045947671, 0.00031591503648087382, 0.00028646393911913037, 0.00036561937304213643, 0.00018482327868696302, 0.00031425090855918825, 7.6940821600146592e-05, 0.00047951153828762472, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 14,58,1,-12,98,-24,127,-4, 
  /* [1][0][][] */ 127,97,107,25,-43,-31,-29,120, 
  /* [2][0][][] */ -64,27,-2,127,20,-36,-26,58, 
  /* [3][0][][] */ 50,-45,-127,-11,-10,-38,14,124, 
  /* [4][0][][] */ -112,55,-127,-8,25,26,-19,-45, 
  /* [5][0][][] */ 117,-20,-10,-56,-2,-26,9,-127, 
  /* [6][0][][] */ -5,-12,1,-6,-127,-19,56,12, 
  /* [7][0][][] */ -2,-57,1,-1,-32,7,-127,3, 
  /* [8][0][][] */ 1,16,41,-6,127,15,-51,-5, 
  /* [9][0][][] */ 86,-17,18,3,-9,-34,26,127, 
  /* [10][0][][] */ 127,1,-1,-36,1,13,-1,-110, 
  /* [11][0][][] */ -62,6,-12,127,-8,-46,-37,24, 
  /* [12][0][][] */ -113,5,-83,4,46,95,-39,-127, 
  /* [13][0][][] */ 127,8,108,12,-6,12,24,43, 
  /* [14][0][][] */ -127,-3,16,18,0,-17,7,118, 
  /* [15][0][][] */ -98,12,1,127,-2,-8,-24,110, 
  /* [16][0][][] */ 70,-55,100,62,-17,-127,4,66, 
  /* [17][0][][] */ 29,-53,-70,127,4,22,-5,124, 
  /* [18][0][][] */ 8,-16,-127,42,-13,-9,34,115, 
  /* [19][0][][] */ 27,11,-7,127,-1,-3,-68,-37, 
  /* [20][0][][] */ 13,61,125,-127,-10,-75,0,-126, 
  /* [21][0][][] */ -11,2,-18,2,-127,-21,54,-9, 
  /* [22][0][][] */ 3,54,1,-9,3,127,-12,2, 
  /* [23][0][][] */ 102,12,-8,127,10,-8,-36,-118, 
  /* [24][0][][] */ -127,49,-115,-68,-5,-40,-87,-92, 
  /* [25][0][][] */ -54,-10,-71,-46,0,-127,13,-60, 
  /* [26][0][][] */ -80,-39,-127,7,11,-1,-27,-30, 
  /* [27][0][][] */ 100,14,127,30,-21,68,16,48, 
  /* [28][0][][] */ 0,-67,-29,47,17,-127,-4,4, 
  /* [29][0][][] */ 2,-10,34,-127,-6,-12,30,12, 
  /* [30][0][][] */ -35,-1,127,-12,-1,12,-4,-101, 
  /* [31][0][][] */ -8,22,-6,0,127,26,-47,-16, 
  /* [32][0][][] */ -127,-12,-122,-11,-12,-46,-48,-63, 
  /* [33][0][][] */ 3,-74,0,-52,31,-127,9,-23, 
  /* [34][0][][] */ -36,-99,-127,119,-18,-93,-54,-11, 
  /* [35][0][][] */ 31,2,-127,-12,-7,13,14,103, 
  /* [36][0][][] */ 69,52,77,14,-12,127,-1,36, 
  /* [37][0][][] */ -12,19,-3,127,5,-16,-9,12, 
  /* [38][0][][] */ -12,35,-3,7,127,26,-45,-15, 
  /* [39][0][][] */ 2,26,-1,33,-59,127,-101,8, 
  /* [40][0][][] */ 113,-19,127,15,-41,46,21,53, 
  /* [41][0][][] */ 127,1,123,26,-4,-9,13,66, 
  /* [42][0][][] */ 51,-63,-11,-32,24,127,40,-29, 
  /* [43][0][][] */ -5,-60,-8,0,-47,-18,-127,4, 
  /* [44][0][][] */ 2,-127,39,103,19,27,8,-109, 
  /* [45][0][][] */ 127,9,125,-9,-19,33,10,55, 
  /* [46][0][][] */ -73,25,5,127,-1,-9,-41,71, 
  /* [47][0][][] */ 2,39,-10,5,5,127,-22,-6, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0027352299075573683, 0.0032139669638127089, 0.0010671300115063787, 0.0018574728164821863, 0.0034108515828847885, 0.011020520702004433, 0.011120493523776531, 0.0057754372246563435, 0.0068171285092830658, 0.0065250280313193798, 0.034155059605836868, 0.00223375647328794, 0.00085951399523764849, 0.0044957264326512814, 0.012335899285972118, 0.00084164569852873683, 0.0038932755123823881, 0.0057471520267426968, 0.0019440483301877975, 0.0032099962700158358, 0.0010430399561300874, 0.016281489282846451, 0.0039314948953688145, 0.0089573636651039124, 0.0023500178940594196, 0.0013938478659838438, 0.0056431423872709274, 0.0038827485404908657, 0.007450758945196867, 0.0037414690013974905, 0.007184633519500494, 0.012871344573795795, 0.0016999447252601385, 0.002274960046634078, 0.0023169324267655611, 0.0059309885837137699, 0.0050291852094233036, 0.0026805063243955374, 0.0086774257943034172, 0.0031960057094693184, 0.0035275500267744064, 0.0032798587344586849, 0.0029740945901721716, 0.0037958933971822262, 0.0019188519800081849, 0.0032625815365463495, 0.00079880660632625222, 0.0049783322028815746, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { 1527, 1087, 518, -7728, 809, -1621, 184, 3976, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00020960660185664892, 0.00020381962531246245, 0.00036442856071516871, 0.00023169178166426718, 0.00027224153745919466, 0.00010570399899734184, 0.00033001837437041104, 0.00017925247084349394, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -6,-17,-22,10,-11,-127,16,32, 
  /* [1][0][][] */ -77,30,-118,127,-8,75,-34,31, 
  /* [2][0][][] */ 1,-8,13,-3,-12,-127,0,28, 
  /* [3][0][][] */ 21,44,40,127,16,-32,-36,-18, 
  /* [4][0][][] */ 10,55,22,-12,-127,-13,18,-18, 
  /* [5][0][][] */ 49,-23,127,-85,9,-68,-10,-40, 
  /* [6][0][][] */ 27,127,52,-43,33,-6,-72,-18, 
  /* [7][0][][] */ -25,-24,-43,-11,-12,-127,10,50, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0089082801714539528, 0.0086623337119817734, 0.015488213859498501, 0.0098469005897641182, 0.011570265516638756, 0.0044924197718501091, 0.014025780372321606, 0.0076182298362255096, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[8] = { 8800, -8, 1725, 1450, 9995, -384, 281, -11830, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 7.7740034612361342e-05, 0.00042491135536693037, 0.00023961368424352258, 0.00045884124119766057, 0.00019552979210857302, 0.00035624115844257176, 0.00073962169699370861, 8.6165004177019e-05, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ -33,0,-2,-2,1,27,-3,11, 21,1,6,-9,16,127,11,127, 12,-1,11,-8,4,16,8,3, 
  /* [0][1][][] */ -12,-127,-19,6,-19,-5,-107,16, -127,107,-78,127,-127,-6,127,-43, 22,-1,0,-61,-5,2,57,-29, 
  /* [0][2][][] */ 3,3,-12,0,3,-22,2,33, 69,1,127,-19,21,-111,-3,34, 23,2,-7,-5,2,-20,2,18, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.0033039513509720564, 0.018058732151985168, 0.010183581151068211, 0.019500752910971642, 0.0083100162446498871, 0.015140249393880367, 0.031433921307325363, 0.0036620127502828836, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[8] = { 43299, 24396, 17134, 12726, 9127, 361807, -3445, 32268, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 7.7867371146567166e-05, 5.5130894907051697e-05, 0.00022242694103624672, 0.00012075909035047516, 0.00013533934543374926, 1.2824533769162372e-05, 1.5308116417145357e-05, 8.0500714830122888e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[8*3*3*3] = { 
  /* [0][0][][] */ 9,-4,13, 8,-24,31, 12,-24,21, 
  /* [0][1][][] */ 39,28,26, 65,17,58, 24,-33,38, 
  /* [0][2][][] */ -21,-93,-13, -30,-127,-1, -8,-56,17, 
  /* [1][0][][] */ 23,64,16, 0,2,-7, -35,-72,-31, 
  /* [1][1][][] */ 43,108,31, -3,-6,-7, -58,-127,-42, 
  /* [1][2][][] */ 21,35,5, -1,-7,-4, -38,-57,-8, 
  /* [2][0][][] */ 42,92,12, 52,127,14, 14,42,0, 
  /* [2][1][][] */ -50,-84,-28, -83,-94,-37, -33,-7,-20, 
  /* [2][2][][] */ -2,11,8, 3,17,1, -2,11,-6, 
  /* [3][0][][] */ 46,-29,-16, 79,-32,-38, 31,-15,-13, 
  /* [3][1][][] */ 79,-53,-37, 127,-51,-72, 59,-26,-29, 
  /* [3][2][][] */ 17,-22,-7, 39,-29,-19, 12,-15,-6, 
  /* [4][0][][] */ -10,-22,-2, 29,46,11, -14,-28,-2, 
  /* [4][1][][] */ -27,-59,-7, 65,127,20, -33,-61,-6, 
  /* [4][2][][] */ -8,-13,4, 22,24,-2, -11,-13,-1, 
  /* [5][0][][] */ -40,-37,-14, -44,-51,-22, -54,-20,-4, 
  /* [5][1][][] */ -118,-90,-27, -127,-95,-26, -89,-24,-5, 
  /* [5][2][][] */ -68,-15,-29, -66,-14,-15, -61,-6,-11, 
  /* [6][0][][] */ -99,-3,41, 5,22,-10, 72,21,-14, 
  /* [6][1][][] */ -127,-32,50, 17,23,-23, 115,20,-26, 
  /* [6][2][][] */ -48,-9,24, 20,-4,4, 41,-7,40, 
  /* [7][0][][] */ -4,17,-2, -14,23,-7, -5,22,-7, 
  /* [7][1][][] */ 19,85,-5, 24,127,-22, -1,61,-26, 
  /* [7][2][][] */ -26,-49,-19, -41,-51,-32, -19,5,-19, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,3 } };
const TfArray<8, float> quant43_scale = { 8, { 0.019856179133057594, 0.014058377593755722, 0.056718867272138596, 0.030793566256761551, 0.034511532634496689, 0.0032702558673918247, 0.003903569420799613, 0.020527681335806847, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.09026578813791275, } };
const TfArray<1, int> quant46_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.096319712698459625, } };
const TfArray<1, int> quant47_zero = { 1, { -30 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.085820160806179047, } };
const TfArray<1, int> quant51_zero = { 1, { -25 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.091495051980018616, } };
const TfArray<1, int> quant54_zero = { 1, { 23 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.091520614922046661, } };
const TfArray<1, int> quant55_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.065311074256896973, } };
const TfArray<1, int> quant59_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.022149864584207535, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.041830383241176605, } };
const TfArray<1, int> quant62_zero = { 1, { -29 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.070568695664405823, } };
const TfArray<1, int> quant63_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.063316583633422852, } };
const TfArray<1, int> quant66_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.088991142809391022, } };
const TfArray<1, int> quant67_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.056467365473508835, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,5 } };
const TfArray<1, float> quant70_scale = { 1, { 0.17337299883365631, } };
const TfArray<1, int> quant70_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,5 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 18432), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension56, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14976), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension60, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension62, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension64, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8064), (TfLiteIntArray*)&g0::tensor_dimension66, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension67, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 720), (TfLiteIntArray*)&g0::tensor_dimension70, 720, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 720, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
